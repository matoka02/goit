{"mappings":"AAuFaA,SAASC,cAAc,SAedC,eAAPC,IACX,MACMC,OADM,CAAC,EAAE,EAAE,EAAE,EAAE,GACGC,KAAIH,MAAMI,SAAcC,MAAM,gCAAgCD,QACtFE,QAAQC,IAAIL,GACX,MAAKM,QAAaC,QAAQC,WAAWR,GAGtC,OAFAI,QAAQC,IAAIC,GACXA,EAAIG,SAAQC,GAAQN,QAAQC,IAAIK,KAC1BJ,C,CAK0BR,eAAtBC,IACX,MACMC,OADM,CAAC,EAAE,EAAE,EAAE,EAAE,GACGC,KAAIH,MAAMI,SAAcC,MAAM,gCAAgCD,QACtFE,QAAQC,IAAIL,GACX,MAAKM,QAAaC,QAAQI,KAAKX,GAGhC,OAFAI,QAAQC,IAAIC,GAELA,C,CAVXP,IAYAA","sources":["src/js/goit-test-11-022.js"],"sourcesContent":["\"use strict\";\n\n\n// <!-- Лекция 26.11.2022 -->\n\n// 1. Примеры асинхронных функций\n\n// async function foo(){\n//     return 'hello'\n// };\n// // console.log(foo);           // async ƒ foo() {}\n// // console.log(foo());         // Promise {<fulfilled>: hello}   \n// foo()\n// .then(data => console.log('data', data))    // hello - все ответы от асинхронной функции придут в then\n// .catch(err => console.log('err', err));\n\n// 2. Примеры асинхронных функций\n\n// async function foo(){\n//     const notAwait = fetch('https://swapi.dev/api/people/1/');\n//     // первый ответ\n//     console.log('notAwait', notAwait);      // notAwait Promise {<pending>}\n//     // третий ответ\n//     const withAwait = await fetch('https://swapi.dev/api/people/1/');\n//     console.log('withAwait', withAwait);    // withAwait Response {type: 'cors', url: 'https://swapi.dev/api/people/1/', redirected: false, status: 200, ok: true, …}\n\n//     // const data = await resp.json();\n//     // console.log(data);              // {name: 'Luke Skywalker', height: '172', mass: '77', hair_color: 'blond', skin_color: 'fair', …}\n\n//     return 'hello';\n// };\n// // второй ответ(серия)\n// console.log('foo()', foo());        // Promise {<pending>}\n// for (let i = 0; i < 20; i+=1) {\n//     console.log('value', i);    \n// }\n\n// 3. Пример асинхронной функции, если данные обрабатываются внутри функции\n\n// const list = document.querySelector('.list');\n\n// async function foo() {\n//     try {\n//         const resp = await fetch('https://swapi.dev/api/people/1/'); //\n//         if (!resp.ok) {\n//             throw new Error('RESP NOT OK!')\n//         }\n//         const data = await resp.json();\n\n//         list.insertAdjacentHTML('beforeend', `<li>\n//         <h1>${data.name}</h1>\n//         <h2>${data.gender}</h2>\n//         </li>`);\n\n//         console.log(data);\n//     } catch (err) {\n//         console.log(err);\n//     }\n// }\n// foo();\n\n\n// // 4. Пример асинхронной функции, если данные нужно передать из функции наружу\n\n// const list = document.querySelector('.list');\n\n// async function foo() {\n//         const resp = await fetch('https://swapi.dev/api/people/1/'); //\n//         if (!resp.ok) {\n//             throw new Error('RESP NOT OK!')\n//         }\n//         const data = await resp.json();\n//         return data;\n// }\n// foo()\n// .then(data => {\n//     console.log(data);\n//     list.insertAdjacentHTML('beforeend', `<li>\n//     <h1>${data.name}</h1>\n//     <h2>${data.gender}</h2>\n//     </li>`);\n// })\n// .catch(err => console.log(err));\n\n\n// 5. Пример асинхронной функции с параллельной обработкой\n\nconst list = document.querySelector('.list');\n\n// // 5.1 отработаются только успешные промисы\n// async function foo() {\n//     const arr = [1,2,3,4,5];\n//     const resps = await arr.map(async hero => await fetch(`https://swapi.dev/api/people/${hero}/`));\n//     console.log(resps);     // (5) [Promise, Promise, Promise, Promise, Promise]\n//     const data = await Promise.all(resps);\n//     console.log(data);      // (5) [Response, Response, Response, Response, Response]\n//     data.forEach(item => console.log(item))\n//     return data;\n// }\n// foo();\n\n// 5.2 отработаются все промисы\nasync function foo() {\n    const arr = [1,2,3,4,5];\n    const resps = await arr.map(async hero => await fetch(`https://swapi.dev/api/people/${hero}/`));\n    console.log(resps);     // (5) [Promise, Promise, Promise, Promise, Promise]\n    const data = await Promise.allSettled(resps);\n    console.log(data);      // (5) {status: 'fulfilled', value: Response}\n    data.forEach(item => console.log(item))\n    return data;\n}\nfoo();\n\n// 5.3 отработает любой успешный промис, но только 1\nasync function foo() {\n    const arr = [1,2,3,4,5];\n    const resps = await arr.map(async hero => await fetch(`https://swapi.dev/api/people/${hero}/`));\n    console.log(resps);     // (5) [Promise, Promise, Promise, Promise, Promise]\n    const data = await Promise.race(resps);\n    console.log(data);      // Response {type: 'cors', url: 'https://swapi.dev/api/people/1/', redirected: false, status: 200, ok: true, …}\n    // data.forEach(item => console.log(item))\n    return data;\n}\nfoo();"],"names":["document","querySelector","async","$72529ddf28a28acb$var$foo","resps","map","hero","fetch","console","log","data","Promise","allSettled","forEach","item","race"],"version":3,"file":"goit-test-11-022.45dc75a0.js.map"}