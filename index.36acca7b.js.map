{"mappings":"AAAA","sources":["src/js/goit-autocheck-01.js"],"sourcesContent":["\"use strict\"\n\n// // autocheck-01-01/36\n// // Объяви две переменные, productName для названия товара и pricePerItem для хранения цены за штуку. При объявлении присвой переменным следующие характеристики товара:\n\n// // - название - строка \"Droid\"\n// // - цена за штуку - число 2000\n\n// const productName = \"Droid\";\n// console.log(productName);\n// const pricePerItem = 2000;\n// console.log(pricePerItem);\n// console.log(typeof(pricePerItem)); //смотрю, как работает\n\n\n// //autocheck-01-02/36\n// // Имя товара изменили на \"Repair droid\" и увеличили его цену на 1500 кредитов. Переопредели значения переменных pricePerItem и productName после их объявления.\n\n// // let productName = \"Droid\";\n// let pricePerItem = 2000;\n\n// productName = \"Repair droid\";\n// console.log(productName);\n// pricePerItem += 1500;\n// console.log(pricePerItem);\n\n\n//autocheck-01-03/36\n// // Объяви следующие переменные используя ключевое слово const или let и присвой им соответствующие значения.\n\n// let topSpeed = 160;\n// let distance = 617.54;\n// let login = \"mango935\";\n// let isOnline = true;\n// let isAdmin = false;\n// console.log(topSpeed);              //смотрю, как работает\n// console.log(typeof (topSpeed));     //смотрю, как работает\n// console.log(typeof (login));        //смотрю, как работает\n// console.log(typeof (isAdmin));      //смотрю, как работает\n\n\n//autocheck-01-04/36\n//  //Дополни код, присвоив переменной totalPrice выражение для подсчёта общей суммы заказа. Переменная pricePerItem хранит цену одной единицы товара, а orderedQuantity - количество единиц товара в заказе.\n\n// const pricePerItem = 3500;\n// const orderedQuantity = 4;\n// const totalPrice = orderedQuantity * pricePerItem;\n// console.log(totalPrice);\n\n\n//autocheck-01-05/36\n// //  Объяви перемнную message и запиши в неё сообщение о покупке, строку в формате: \"You picked <имя товара>, price per item is <цена товара> credits\". Где <имя товара> и <цена товара> это значения переменных productName и pricePerItem. Используй синтаксис шаблонных строк.\n\n// const productName = \"Droid\";\n// const pricePerItem = 3500;\n// const message = `You picked ${productName}, price per item is ${pricePerItem} credits`;\n// console.log(message);\n\n\n//autocheck-01-06/36\n// // Магазин по продаже ремонтных дроидов готов к открытию, осталось написать скрипт для их заказа. Объяви переменные и присвой им соответствующие значения:\n// // - pricePerDroid - цена одного дроида, значение 800\n// // - orderedQuantity - количество дроидов в заказе, значение 6\n// // - deliveryFee - стоимость доставки, значение 50\n// // - totalPrice - общая сумма заказа к оплате, не забудь о стоимости доставки\n// // - message - сообщение о состоянии заказа в формате \"You ordered droids worth <total price> credits. Delivery (<delivery fee> credits) is included in total price.\"\n\n// const pricePerDroid = 800;\n// const orderedQuantity = 6;\n// const deliveryFee = 50;\n// const totalPrice = orderedQuantity * pricePerDroid + deliveryFee;\n// const message = `You ordered droids worth ${totalPrice} credits. Delivery ${deliveryFee} is included in total price.`;\n// console.log(message);\n\n//autocheck-01-07/36\n// // Объяви функцию sayHi, внутри которой добавь console.log() со строкой \"Hello, this is my first function!\". После объявления вызови функцию sayHi.\n\n// function sayHi() {\n//     console.log(\"Hello, this is my first function!\");\n// }\n// sayHi();\n\n\n//autocheck-01-08/36\n// // Функция add должна уметь складывать три числа и выводить результат в консоль. Добавь функции add три параметра a, b и c, которые будут получать значения аргументов при её вызове.\n// // Дополни console.log() так, чтобы он логировал строку \"Addition result equals <result>\", где <result> это сумма переданных чисел.\n\n// function add(a, b, c) {\n//     console.log(a + b + c);\n// }\n// add(15, 27, 10); //52\n// add(10, 20, 30); //60\n// add(5, 10, 15); //30\n\n\n//autocheck-01-09/36\n// // Дополни код функции add так, чтобы она возвращала результат сложения значений трёх параметров a, b и c.\n\n// function add(a, b, c) {\n//     return (a + b + c)\n// }\n// add(2, 5, 8);\n\n// console.log(add(15, 27, 10));\n// console.log(add(10, 20, 30));\n// console.log(add(5, 10, 15));\n\n\n//autocheck-01-10/36\n// // Функция makeMessage(name, price) составляет и возвращает сообщение о покупке. Она объявляет два параметра, значения которых будут задаваться во время её вызова.\n// // - name - название товара\n// // - price - цена товара\n\n// function makeMessage(name, price) {\n//     const message = `You picked ${name}, price per item is ${price} credits`;\n//     return message;\n// };\n// makeMessage('Radar', 6150);\n// makeMessage('Scanner', 3500);\n// makeMessage('Reactor', 8000);\n// makeMessage('Engine', 4070);\n// console.log(makeMessage('Radar', 6150));    //смотрю, как работает\n// console.log(makeMessage('Scanner', 3500));  //смотрю, как работает\n// console.log(makeMessage('Reactor', 8000));  //смотрю, как работает\n// console.log(makeMessage('Engine', 4070));   //смотрю, как работает\n\n\n//autocheck-01-11/36\n// // Функция calculateTotalPrice считает и возвращает общую сумму покупки. Она принимает два параметра, значения которых будут задаваться во время её вызова.\n// // - orderedQuantity - количество единиц товара в заказе;\n// // - pricePerItem - цена одной единицы товара.\n// // Дополни код функции так, чтобы в переменную totalPrice записывалась общая сумма покупки, результат умножения кол-ва товаров на цену одного.\n\n// function calculateTotalPrice(orderedQuantity, pricePerItem) {\n//     const totalPrice = orderedQuantity * pricePerItem;\n//     return totalPrice;\n// };\n// calculateTotalPrice(5, 100);\n// calculateTotalPrice(8, 60);\n// calculateTotalPrice(3, 400);\n// calculateTotalPrice(1, 3500);\n// calculateTotalPrice(12, 70);\n// console.log(calculateTotalPrice(5, 100));    //смотрю, как работает\n// console.log(calculateTotalPrice(8, 60));     //смотрю, как работает\n// console.log(calculateTotalPrice(3, 400));    //смотрю, как работает\n// console.log(calculateTotalPrice(1, 3500));   //смотрю, как работает\n// console.log(calculateTotalPrice(12, 70));    //смотрю, как работает\n\n\n//autocheck-01-12/36\n// // Функция makeOrderMessage(orderedQuantity, pricePerDroid, deliveryFee) составляет и возвращает сообщение о покупке ремонтных дроидов. Она объявляет три параметра, значения которых будут задаваться во время её вызова.\n\n// // - orderedQuantity - количество дроидов в заказе\n// // - pricePerDroid - цена одного дроида\n// // - deliveryFee - стоимость доставки\n// // Дополни код функции так, чтобы она возвращала сообщение о заказе в формате \"You ordered droids worth <total price> credits. Delivery (<delivery fee> credits) is included in total price.\". Не забудь о цене доставки при вычислениях общей стоимости.\n\n// function makeOrderMessage(orderedQuantity, pricePerDroid, deliveryFee) {\n//     const totalPrice = orderedQuantity * pricePerDroid + deliveryFee\n//     const message = `You ordered droids worth ${totalPrice} credits. Delivery ${deliveryFee} is included in total price.`;\n//     return message;\n// }\n// makeOrderMessage(2, 100, 50);\n// makeOrderMessage(4, 300, 100);\n// makeOrderMessage(10, 70, 200);\n// console.log(makeOrderMessage(2, 100, 50));     //смотрю, как работает\n// console.log(makeOrderMessage(4, 300, 100));    //смотрю, как работает\n// console.log(makeOrderMessage(10, 70, 200));    //смотрю, как работает\n\n\n//autocheck-01-13/36\n// // Функция isAdult объявляет один параметр age (возраст), значение которого будет задаваться во время её вызова. Присвой переменной passed выражение проверки возраста пользователя на совершеннолетие. Человек считается совершеннолетним в возрасте 18 лет и старше.\n\n// function isAdult(age) {\n//     const passed = ((age) => 18);\n//     return passed;\n// }\n\n\n//autocheck-01-14/36\n// // Функция isValidPassword(password) проверяет равенство сохранённого и введённого паролей и возвращает результат проверки - буль true или false. Переменная SAVED_PASSWORD хранит значение ранее сохраненного пароля. Введённый пароль передаётся в параметр password.\n// // Присвой переменной isMatch выражение проверки равенства введённого и сохранённого ранее паролей. Результатом выражения проверки должно быть true, если значения совпадают, и false, если нет.\n\n// function isValidPassword(password) {\n//     const SAVED_PASSWORD = 'mangodab3st';           //false\n//     const SAVED_PASSWORD = 'kiwirul3z';             //false\n//     const SAVED_PASSWORD = 'jqueryismyjam';         //true\n//     const isMatch = SAVED_PASSWORD === password;\n//     return isMatch;\n// }\n\n\n//autocheck-01-15/36\n// // Добавь выражение проверки совершеннолетия пользователя, значения параметра age, в условие для инструкции if.\n// // Если пользователь совершеннолетний, должен выполняться блок if и в переменную message записывается строка \"You are an adult\".\n// // В противном случае должен выполняться блок else и записывается строка \"You are a minor\".\n\n// function checkAge(age) {\n//     let message;\n\n//     if (age >= 18) {\n//         message = 'You are an adult';\n//     } else {\n//         message = 'You are a minor';\n//     }\n\n//     return message;\n// }\n\n\n//autocheck-01-16/36\n// // Функция checkStorage(available, ordered) проверяет возможность оформления заказа и возвращает сообщение о результате. Она объявляет два параметра, значения которых будут задаваться во время её вызова:\n// // - available - общее количество товаров на складе\n// // - ordered - единиц товара в заказе\n// // Используя ветвления дополни код функции так, что:\n// //  - Если в заказе указано число, превышающее количество товаров на складе, в переменную message записывается строка \"Not enough goods in stock!\".\n// //  - В противном случае записывается строка \"Order is processed, our manager will contact you.\".\n\n// function checkStorage(available, ordered) {\n//     let message;\n\n//     if (available >= ordered) {\n//         message = 'Order is processed, our manager will contact you.';\n//     } else {\n//         message = 'Not enough goods in stock!';\n//     }\n\n//     console.log(message);\n\n//     return message;\n// }\n// checkStorage(100, 50);\n// checkStorage(100, 130);\n// checkStorage(200, 20);\n// checkStorage(200, 150);\n// checkStorage(150, 180);\n\n//autocheck-01-17/36\n// // Замени выражения со стандартными математеческими операторами на комбинированный оператор присвоения с добавлением, вычитанием, умножением и делением.\n\n// let a = 7;\n// let b = 6;\n// let c = 45;\n// let d = 2;\n\n// console.log(a, b, c, d);        //посмотреть, как работает\n\n// a += 2;     //9\n// b -= 4;     //2\n// c *= 3;     //135\n// d /= 10;    //0.2\n\n// console.log (a, b, c, d);       //посмотреть, как работает\n\n\n//autocheck-01-18/36\n// // Станция по продаже ремонтных дроидов готова к запуску, осталось написать программное обеспечение для отдела продаж.\n// // Функция makeTransaction(pricePerDroid, orderedQuantity, customerCredits) выполняет транзакцию по продаже дроидов и возвращает сообщение о результате операции. Она объявляет три параметра, значения которых будут задаваться во время её вызова:\n// // - pricePerDroid - цена одного дроида\n// // - orderedQuantity - кол-во заказанных дроидов\n// // - customerCredits - сумма средств на счету клиента\n// // Дополни её следующим функционалом:\n// // - Объяви переменную totalPrice для хранения общей суммы заказа и присвой ей выражение расчёта этой суммы.\n// // - Добавь проверку сможет ли клиент оплатить заказ:\n// //  -- если сумма к оплате превышает количество кредитов на счету клиента, запиши в переменную message строку \"Insufficient funds!\";\n// //  -- в противном случае, вычти сумму покупки со счёта клиента и запиши в переменную message сообщение: \"You ordered <число> droids, you have <число> credits left\".\n\n// function makeTransaction(pricePerDroid, orderedQuantity, customerCredits) {\n//     let message;\n\n//     const totalPrice = pricePerDroid * orderedQuantity;\n\n//     if (totalPrice >= customerCredits) {\n//         message = `Insufficient funds!`;\n//     } else {\n//         message = `You ordered ${orderedQuantity} droids, you have ${customerCredits - totalPrice} credits left`;\n//     }\n\n//     console.log(message);\n\n//     return message;\n// }\n// makeTransaction(3000, 5, 23000);\n// makeTransaction(1000, 3, 15000);\n// makeTransaction(5000, 10, 8000);\n// makeTransaction(2000, 8, 10000);\n// makeTransaction(500, 10, 5000);\n\n\n//autocheck-01-19/36\n// // Функция checkPassword(password) получает пароль пользователя в параметр password, проверяет его на совпадение с паролем администратора в переменной ADMIN_PASSWORD и возвращает сообщение о результате сравнения, хранящееся в переменной message.\n// // - Если значение параметра password равно null, значит пользователь отменил операцию и в message записывается строка \"Canceled by user!\".\n// // - Если значение параметра password совпадает со значением ADMIN_PASSWORD, в переменную message присваивается строка \"Welcome!\".\n// // - Если ни одно из предыдущих условий не выполнилось, в переменную message записывается строка \"Access denied, wrong password!\".\n\n// function checkPassword(password) {\n//     const ADMIN_PASSWORD = 'jqueryismyjam';\n//     let message;\n\n//     if (password === null) {\n//         message = 'Canceled by user!';\n//     } else if (password === 'jqueryismyjam') {\n//         message = 'Welcome!';\n//     } else {\n//         message = 'Access denied, wrong password!';\n//     }\n\n//     console.log(message);\n\n//     return message;\n// }\n// checkPassword(\"mangohackzor\");\n// checkPassword(null);\n// checkPassword(\"polyhax\");\n// checkPassword(\"jqueryismyjam\");\n\n\n//autocheck-01-20/36\n// // Функция checkStorage(available, ordered) проверяет возможность оформления заказа и возвращает сообщение о результате. Она объявляет два параметра, значения которых будут задаваться во время её вызова.\n// // - available - доступное количество товаров на складе\n// // - ordered - единиц товара в заказе\n// // Используя ветвления дополни код функции так, что:\n// // - Если в заказе еще нет товаров, то есть значение параметра ordered равно 0, в переменную message присваивается строка \"There are no products in the order!\".\n// // - Eсли товаров в заказе больше чем доступно товаров на складе, то в переменную message присваивается строка \"Your order is too large, there are not enough items in stock!\".\n// // - В противном случае в переменную message присваевается строка \"The order is accepted, our manager will contact you\".\n\n// function checkStorage(available, ordered) {\n//     let message;\n\n//     if (ordered === 0) {\n//         message = `There are no products in the order!`;\n//     } else if (ordered >= available) {\n//         message = `Your order is too large, there are not enough items in stock!`;\n//     } else {\n//         message = `The order is accepted, our manager will contact you`;\n//     }\n\n//     console.log(message);\n\n//     return message;\n// }\n// checkStorage(100, 50);\n// checkStorage(100, 130);\n// checkStorage(70, 0);\n// checkStorage(200, 20);\n// checkStorage(200, 250);\n// checkStorage(150, 0);\n\n\n//autocheck-01-21/36\n// // Функция isNumberInRange(start, end, number) проверяет, входит ли число в промежуток. Она объявляет три параметра, значения которых будут задаваться во время её вызова:\n// // - number - число, вхождение которого проверяется\n// // - start - начало числового промежутка\n// // - end - конец числового промежутка\n// // Присвой переменной isInRange выражение проверки вхождения number в числовой промеждуток от start до end. То есть число должно быть больше либо равно start и меньше либо равно end. Результатом выражения проверки будет буль true или false.\n\n// function isNumberInRange(start, end, number) {\n//     const isInRange = (number >= start && number <= end);\n\n//     console.log(isInRange);\n\n//     return isInRange;\n// }\n// isNumberInRange(10, 30, 17);    //true\n// isNumberInRange(10, 30, 5);     //false\n// isNumberInRange(20, 50, 24);    //true\n// isNumberInRange(20, 50, 76);    //false\n\n\n//autocheck-01-22/36\n// // Функция checkIfCanAccessContent(subType) проверяет, может ли пользователь получить доступ к контенту. Проверка происходит по типу подписки. Получить доступ могут только пользователи с подпиской pro или vip.\n// // Присвой переменной canAccessContent выражение проверки подписки. Если значение параметра subType равно строкам \"pro\" или \"vip\", пользователь получит доступ. Результатом выражения проверки будет буль true или false.\n\n// function checkIfCanAccessContent(subType) {\n//     const canAccessContent = (subType === 'pro' || subType === 'vip');\n\n//     console.log(canAccessContent);\n\n//     return canAccessContent;\n// }\n// checkIfCanAccessContent(\"pro\");         //true\n// checkIfCanAccessContent(\"starter\");     //false\n// checkIfCanAccessContent(\"vip\");         //true\n// checkIfCanAccessContent(\"free\");        //false\n\n\n//autocheck-01-23/36\n// // Функция isNumberNotInRange(start, end, number) проверяет, не входит ли число в промежуток. То есть число должно быть меньше либо равно start и больше либо равно end. Результатом выражения проверки будет буль true или false.\n// // Она объявляет три параметра, значения которых будут задаваться во время её вызова:\n// // - number - число, не вхождение которого проверяется\n// // - start - начало числового промежутка\n// // - end - конец числового промежутка\n// // Присвой переменной isNotInRange выражение инверсии значения переменной isInRange используя оператор !.\n\n\n// function isNumberInRange(start, end, number) {\n//     const isInRange = (number >= start && number <= end);\n//     const isNotInRange = !isInRange;\n\n//     console.log(isInRange);\n\n//     return isInRange;\n// }\n// isNumberInRange(10, 30, 17);    //true\n// isNumberInRange(10, 30, 5);     //false\n// isNumberInRange(20, 50, 24);    //true\n// isNumberInRange(20, 50, 76);    //false\n\n// // В задаче були наоборот, т.к. использовалось значение isNumberNotInRange\n\n//autocheck-01-24/36\n// // Функция getDiscount(totalSpent) определяет значение скидки в зависимости от общей суммы потраченных денег (параметр totalSpent) в магазине за всё время (партнёрская программа). Скидка записывается в переменную discount и возвращается из функции как результат её работы.\n// // Используя ветвления и логические операторы, дополни код функции.\n// // - Если потрачено от 50000 ( включительно ) или больше кредитов - скидка 10% (золотой партнёр)\n// // - Если потрачено от 20000 (включительно) до 50000 кредитов - скидка 5% (серебрянный партнёр)\n// // - Если потрачено от 5000 (включительно) до 20000 кредитов - скидка 2% (бронзовый партнёр)\n// // - Если потрачено меньше чем 5000 кредитов - скидка 0 (базовый партнёр)\n// // Значения скидок каждого уровня хранятся в одноимённых константах BASE_DISCOUNT, BRONZE_DISCOUNT, SILVER_DISCOUNT и GOLD_DISCOUNT.\n\n// function getDiscount(totalSpent) {\n//     let discount;\n//     const BASE_DISCOUNT = 0;\n//     const BRONZE_DISCOUNT = 0.02;\n//     const SILVER_DISCOUNT = 0.05;\n//     const GOLD_DISCOUNT = 0.10;\n\n//     if (totalSpent >= 50000) {\n//         discount = GOLD_DISCOUNT;\n//     } else if (totalSpent >= 20000 && totalSpent < 50000) {\n//         discount = SILVER_DISCOUNT;\n//     } else if (totalSpent >= 5000 && totalSpent < 20000) {\n//         discount = BRONZE_DISCOUNT;\n//     } else {\n//         discount = BASE_DISCOUNT;\n//     }\n\n//     console.log(discount);\n\n//     return discount;\n// }\n// getDiscount(137000);\n// getDiscount(46900);\n// getDiscount(8250);\n// getDiscount(1300);\n// getDiscount(5000);\n// getDiscount(20000);\n// getDiscount(50000);\n\n\n//autocheck-01-25/36\n// // Выполни рефакторинг решения задачи «Склад товаров», заменив инструкцию if...else тернарным оператором.\n\n// function checkStorage(available, ordered) {\n//     let message;\n\n//     message = ordered > available ? \"Not enough goods in stock!\" : \"The order is accepted, our manager will contact you\"\n    \n//     console.log(message);\n\n//     return message;\n// }\n// checkStorage(100, 50);\n// checkStorage(100, 130);\n// checkStorage(200, 20);\n// checkStorage(200, 150);\n// checkStorage(150, 180);\n\n//autocheck-01-26/36\n// // Функция checkPassword(password) сравнивает переданный ей пароль (параметр password) с сохранённым паролем администратора (константа ADMIN_PASSWORD) и возвращает строку с сообщением о результате.\n// // Используя тернарный оператор дополни функцию так, что:\n// // - Если значения password и ADMIN_PASSWORD совпадают, присвой переменной message строку \"Access is allowed\".\n// // - В противном случае, присвой message строку \"Access denied, wrong password!\".\n\n// function checkPassword(password) {\n//     const ADMIN_PASSWORD = \"jqueryismyjam\";\n//     let message;\n\n//     message = password === ADMIN_PASSWORD ? \"Access is allowed\" : \"Access denied, wrong password!\";\n\n//     console.log(message);\n\n//     return message;\n// }\n// checkPassword(\"jqueryismyjam\");\n// checkPassword(\"angul4r1sl1f3\");\n// checkPassword(\"r3actsux\");\n\n\n//autocheck-01-27/36\n// // Функция getSubscriptionPrice(type) получает строку с типом подписки пользователя (параметр type), проверяет её на совпадение с тремя возможными типами ежемесячной подписки и возвращает цену хранящуюся в переменной price.\n// // Если значение параметра type это строка:\n// // - \"starter\" - цена подписки 0 кредитов.\n// // - \"professional\" - цена подписки 20 кредитов.\n// // - \"organization\" - цена подписки 50 кредитов.\n// // Изначально в теле функции была инструкция if...else, которая выглядела вот так.\n\n// // if (type === \"starter\") {\n// //   price = 0;\n// // } else if (type === \"professional\") {\n// //   price = 20;\n// // } else if (type === \"organization\") {\n// //   price = 50;\n// // }\n// // После рефакторинга инструкция if..else была заменена на switch. Дополни код инструкции switch, чтобы функция работала правильно.\n\n// function getSubscriptionPrice(type) {\n//     let price;\n\n//     switch (type) {\n//         case \"starter\":\n//             price = 0;\n//             break;\n//         case \"professional\":\n//             price = 20;\n//             break;\n//         case \"organization\":\n//             price = 50;\n//             break;\n//         default:         // в этой задаче необязательная команда\n//             break;\n//     }\n\n//     console.log(price);\n\n//     return price;\n// }\n// getSubscriptionPrice(\"professional\");\n// getSubscriptionPrice(\"organization\");\n// getSubscriptionPrice(\"starter\");\n\n\n//autocheck-01-28/36\n// // Функция checkPassword(password) получает пароль в параметр password, проверяет его на совпадение с паролем администратора в переменной ADMIN_PASSWORD и возвращает сообщение о результате сравнения, хранящееся в переменной message.\n// // Если значение параметра password:\n// // - равно null, значит пользователь отменил операцию и в message записывается строка \"Canceled by user!\".\n// // - совпадает со значением ADMIN_PASSWORD, в переменную message присваивается строка \"Welcome!\".\n// // - не удовлетворяет ни одному из предыдущих условий, в переменную message записывается строка \"Access denied, wrong password!\".\n// // Проведи рефакторинг кода, заменив инструкцию if..else на switch, и не забудь о блоке default (аналог else).\n\n// function checkPassword(password) {\n//     const ADMIN_PASSWORD = \"jqueryismyjam\";\n//     let message;\n\n//     switch (password) {\n//         case null:\n//             message = \"Canceled by user!\";\n//             break;\n    \n//         case ADMIN_PASSWORD:\n//             message = \"Welcome!\";\n//             break;\n            \n//         default:\n//             message = \"Access denied, wrong password!\";\n//             break;\n//     }\n\n//     console.log(message);\n\n//     return message;\n// }\n// checkPassword(\"mangohackzor\");\n// checkPassword(null);\n// checkPassword(\"polyhax\");\n// checkPassword(\"jqueryismyjam\");\n\n\n//autocheck-01-29/36\n// // Функция getShippingCost(country) должна проверять возможность доставки товара в страну пользователя (параметр country) и возвращать сообщение о результате хранящееся в переменной message. Обязательно используй инструкцию switch.\n// // Формат возвращаемой строки \"Shipping to <country> will cost <price> credits\", где вместо <country> и <price> необходимо подставить соотвествующие значения.\n// // Список стран и стоимость доставки:\n// // - China - 100 кредитов\n// // - Chile - 250 кредитов\n// // - Australia - 170 кредитов\n// // - Jamaica - 120 кредитов\n// // Из списка видно, что доставка есть не везде. Если указанной страны нет в списке, то функция должна вернуть строку \"Sorry, there is no delivery to your country\"\n\n// function getShippingCost(country) {\n//     let message;\n\n//     switch (country) {\n//         case \"China\":\n//             message = `Shipping to ${country} will cost 100 credits`;\n//             break;\n    \n//         case \"Chile\":\n//             message = `Shipping to ${country} will cost 250 credits`;\n//             break;\n    \n//         case \"Australia\":\n//             message = `Shipping to ${country} will cost 170 credits`;\n//             break;\n    \n//         case \"Jamaica\":\n//             message = `Shipping to ${country} will cost 120 credits`;\n//             break;\n    \n//         default:\n//             message = `Sorry, there is no delivery to your country`;\n//             break;\n//     }\n\n//     console.log(message);\n\n//     return message;\n// }\n// getShippingCost(\"Australia\");\n// getShippingCost(\"Germany\");\n// getShippingCost(\"China\");\n// getShippingCost(\"Chile\");\n// getShippingCost(\"Jamaica\");\n// getShippingCost(\"Sweden\");\n\n\n//autocheck-01-30/36\n// // Функция getNameLength(name) принимает имя (параметр name) и возвращает строку, в которой указана его длина. Дополни шаблонную строку в переменной message длиной строки из параметра name.\n\n// function getNameLength(name) {\n    \n//     const message = `Name ${name} is ${name.length} characters long`;\n\n//     console.log(message);\n\n//     return message;\n// }\n// getNameLength(\"Poly\");\n// getNameLength(\"Harambe\");\n// getNameLength(\"Billy\");\n// getNameLength(\"Joe\");\n\n\n//autocheck-01-31/36\n// // Дополни код присвоив объявленным переменным выражения обращения к соответствующим элементам или свойствам строки в переменной course.\n// // - courseTopicLength - длина строки.\n// // - firstElement - первый символ строки.\n// // - lastElement - последний символ строки.\n\n// const courseTopic = \"JavaScript essentials\";\n\n// const courseTopicLength = courseTopic.length;\n// const firstElement = courseTopic[0];\n// const lastElement = courseTopic[courseTopic.length-1];\n\n// console.log(courseTopicLength);  //21\n// console.log(firstElement);       //J\n// console.log(lastElement);        //s\n\n\n//autocheck-01-32/36\n// // Функция getSubstring(string, length) принимает строку и возвращает подстроку от начала и до length символов. Она объявляет два параметра, значения которых будут задаваться во время её вызова:\n// // - string - оригинальная строка\n// // - length - количество символов с начала строки для подстроки\n// // Присвой переменной substring выражение создания подстроки длинной length символов (от начала) из строки string.\n\n// function getSubstring(string, length) {\n//     const substring = string.slice(0, length);\n\n//     console.log(substring);\n\n//     return substring;\n// }\n// getSubstring(\"Hello world\", 3);\n// getSubstring(\"Hello world\", 6);\n// getSubstring(\"Hello world\", 8);\n// getSubstring(\"Hello world\", 11);\n// getSubstring(\"Hello world\", 0);\n\n\n//autocheck-01-33/36\n// Функция formatMessage(message, maxLength) принимает строку (параметр message) и форматирует её, если длина превышает значение в параметре maxLength.\n// Дополни код функции так, что если длина строки:\n// - не превышает maxLength, функция возвращает её в исходном виде.\n// - больше maxLength, то функция обрезает строку до maxLength символов и добавляет в конец троеточие \"...\", после чего возвращает укороченную версию.\n\n// function formatMessage(message, maxLength) {\n//     let result;\n\n//     // if (message <= maxLength) {\n//     //     result = message;\n//     // } else {\n//     //     result = `&{message.slice(0, maxLength)} ...`;\n//     // }\n\n//     result = message.length <=  maxLength ? message : `${message.slice(0, maxLength)} ...`;\n\n//     console.log(result);\n\n//     return result;\n// }\n// formatMessage(`Curabitur ligula sapien`, 16);\n// formatMessage(`Curabitur ligula sapien`, 23);\n// formatMessage(`Vestibulum facilisis purus nec`, 20);\n// formatMessage(`Vestibulum facilisis purus nec`, 30);\n// formatMessage(`Nunc sed turpis a felis in nunc fringilla`, 15);\n// formatMessage(`Nunc sed turpis a felis in nunc fringilla`, 41);\n\n\n//autocheck-01-34/36\n// // Функция normalizeInput(input) принимает строку (параметр input) и возвращает такую же строку, но в нижнем регистре. Присвой переменной normalizedInput выражение создания строки в нижнем регистре из параметра input.\n\n// function normalizeInput(input) {\n//     const normalizedInput = input.toLowerCase();\n\n//     console.log(normalizedInput);\n\n//     return normalizedInput;\n// }\n// normalizeInput(\"Hello world\");\n// normalizeInput(\"This ISN'T SpaM\");\n// normalizeInput(\"Big SALE\");\n\n\n//autocheck-01-35/36\n// // Функция checkForName(fullname, name) принимает два параметра и возвращает буль true или false - результат проверки вхождения подстроки name в строку fullname.\n// // - fullname - полное имя состоящее из двух слов (имени и фамилии) разделённых пробелом.\n// // - name - имя для проверки вхождения в полное имя.\n// // Присвой переменной result выражение проверки вхождения имени (параметр name), в полное имя (параметр fullname). Пусть функция строго относится к регистру букв, то есть «Петя» и «петя» для неё разные имена.\n\n// function checkForName(fullname, name) {\n//     const result = fullname.includes(name);\n\n//     console.log(result);\n\n//     return result;\n// }\n// checkForName(\"Egor Kolbasov\", \"Egor\");\n// checkForName(\"Egor Kolbasov\", \"egor\");\n// checkForName(\"Egor Kolbasov\", \"egOr\");\n// checkForName(\"Egor Kolbasov\", \"Zhenya\");\n// checkForName(\"Vadim Nekrasov\", \"Vadim\");\n// checkForName(\"Vadim Nekrasov\", \"vadim\");\n// checkForName(\"Vadim Nekrasov\", \"Dima\");\n\n\n//autocheck-01-36/36\n// // Функция checkForSpam(message) принимает строку (параметр message), проверяет её на содержание запрещенных слов spam и sale, и возвращает результат проверки. Слова в строке параметра message могут быть в произвольном регистре, например SPAM или sAlE.\n// // - Если нашли запрещенное слово (spam или sale) то функция возвращает буль true.\n// // - Если в строке нет запрещенных слов, функция возвращает буль false.\n\n// function checkForSpam(message) {\n//     let result;\n\n//     result = message.includes('spam') || message.includes('sale');\n\n//     console.log(result);\n\n//     return result;\n// }\n// checkForSpam(\"Latest technology news\");                       //false\n// checkForSpam(\"JavaScript weekly newsletter\");                 //false\n// checkForSpam(\"Get best sale offers now!\");                    //true\n// checkForSpam(\"Amazing SalE, only tonight!\");                  //false\n// checkForSpam(\"Trust me, this is not a spam message\");         //true\n// checkForSpam(\"Get rid of sPaM emails. Our book in on sale!\"); //true\n// checkForSpam(\"[SPAM] How to earn fast money?\");               //false\n"],"names":[],"version":3,"file":"index.36acca7b.js.map"}