{"mappings":"AAAA","sources":["src/js/goit-autocheck-02.js"],"sourcesContent":["\"use strict\"\n\n// // autocheck-02-01/32\n// // Запиши условие в инструкции if так, чтобы функция работала правильно.\n\n// function checkAge(age) {\n//     let message;\n\n//     if (age >= 18) {\n//         console.log(\"You are an adult\");\n//         return;\n//     }\n\n//     console.log(\"You are a minor\");\n\n//     return message;\n// }\n// checkAge(20);\n// checkAge(8);\n// checkAge(14);\n// checkAge(38);\n\n// //Решение в автопроверке:\n\n// function checkAge(age) {\n\n//     if (age >= 18) {\n//         return \"You are an adult\";\n//     }\n\n//     return \"You are a minor\";\n// }\n\n\n// // autocheck-02-02/32\n// // Функция checkPassword получает пароль пользователя в параметр password, проверяет его на совпадение с паролем администратора в переменной ADMIN_PASSWORD и возвращает сообщение о результате сравнения.\n// // Проведи рефакторинг кода функции checkPassword используя паттерн «ранний возврат»:\n// // - удали переменную message\n// // - удали else\n// // - код должен работать так же, как и до оптимизации\n\n// function checkPassword(password) {\n//     const ADMIN_PASSWORD = \"jqueryismyjam\";\n\n//     if (password === ADMIN_PASSWORD) {\n//         console.log(\"Welcome!\");\n//         return;\n//     }\n\n//     console.log(\"Access denied, wrong password!\");\n\n//     return ADMIN_PASSWORD;\n// }\n// checkPassword(\"mangohackzor\");\n// checkPassword(\"polyhax\");\n// checkPassword(\"jqueryismyjam\");\n\n\n// // autocheck-02-03/32\n// // Функция checkStorage проверяет возможность оформления заказа и возвращает сообщение о результате. Она принимает два параметра, значения которых будут задаваться во время её вызова.\n// // - available - доступное количество товаров на складе\n// // - ordered - количество единиц товара в заказе\n// // Проведи рефакторинг кода функции checkStorage используя паттерн «ранний возврат».\n\n// function checkStorage(available, ordered) {\n//     let message;\n\n//     if (ordered === 0) {\n//         console.log(\"Your order is empty!\");\n//         return;\n//     } if (ordered > available) {\n//         console.log(\"Your order is too large, not enough goods in stock!\");\n//         return;\n//     }\n\n//     console.log(\"The order is accepted, our manager will contact you\");\n\n//     return message;\n// }\n// checkStorage(100, 50);\n// checkStorage(100, 130);\n// checkStorage(70, 0);\n// checkStorage(200, 20);\n// checkStorage(200, 250);\n// checkStorage(150, 0);\n\n\n// // autocheck-02-04/32\n// // Объяви переменную fruits и присвой ей массив фруктов - строк \"apple\", \"plum\", \"pear\" и \"orange\".\n\n// const fruits = [\"apple\", \"plum\", \"pear\", \"orange\"];\n// console.log(fruits);\n\n\n// // autocheck-02-05/32\n// // Объяви три переменные и присвой каждой из них значение, используя нотацию квадратных скобок.\n// // Имя переменной\t    Значение переменной\n// // ______________       ___________________\n// // firstElement\t        первый элемент массива\n// // secondElement\t        второй элемент массива\n// // lastElement\t        последний элемент массива\n\n// const fruits = [\"apple\", \"plum\", \"pear\", \"orange\"];\n// const firstElement = fruits[0];\n// const secondElement = fruits[1];\n// const lastElement = fruits[fruits.length -1];\n// // const lastElement = fruits[3];           //тоже можно\n// console.log(fruits);\n// console.log(firstElement);\n// console.log(secondElement);\n// console.log(lastElement);\n\n\n// // autocheck-02-06/32\n// // Переопредели значения элементов с индексами 1 и 3. Замени \"plum\" на \"peach\", а \"orange\" на \"banana\".\n\n// const fruits = [\"apple\", \"plum\", \"pear\", \"orange\"];\n// fruits[1] = \"peach\";\n// fruits[fruits.length -1] = \"banana\";\n// // fruits[3] = \"banana\";                     //тоже можно\n// console.log(fruits);\n\n\n// // autocheck-02-07/32\n// // Объяви переменную fruitsArrayLength и присвой ей длину массива fruits используя свойство length.\n\n// const fruits = [\"apple\", \"peach\", \"pear\", \"banana\"];\n// const fruitsArrayLength = fruits.length;\n// console.log(fruitsArrayLength);\n\n// // autocheck-02-08/32\n// // Объяви две переменные:\n\n// // Имя переменной\t    Ожидаемое значение\n// // ______________       __________________\n// // lastElementIndex\t    Индекс последнего элемента масcива fruits через длина_массива - 1\n// // lastElement\t        Значение последнего элемента массива\n\n// const fruits = [\"apple\", \"peach\", \"pear\", \"banana\"];\n// const lastElementIndex = fruits.length-1;\n// const lastElement = fruits[fruits.length - 1];\n// // const lastElement = fruits[lastElementIndex];   //тоже можно\n// console.log(lastElementIndex);\n// console.log(lastElement);\n\n\n// // autocheck-02-09/32\n// // Напиши функцию getExtremeElements(array) которая принимает один параметр array - массив элементов произвольной длины. Функция должна возвращать массив из двух элементов - первого и последнего элемента параметра array.\n\n// function getExtremeElements(array) {\n//     let array1 = [array[0], array[array.length - 1]];\n//     console.log(array1);\n//     return;\n// }\n// getExtremeElements([1, 2, 3, 4, 5]);\n// getExtremeElements([\"Earth\", \"Mars\", \"Venus\"]);\n// getExtremeElements([\"apple\", \"peach\", \"pear\", \"banana\"]);\n\n// // //Решение в автопроверке:\n\n// function getExtremeElements(array) {\n// return [array[0], array[array.length - 1]];\n// }\n\n\n// // autocheck-02-10/32\n// // Дополни код функции splitMessage(message, delimiter) так, чтобы она возвращала в переменной words результат разделения строки message по разделителю delimiter - массив строк.\n\n// // 1 вариант\n// function splitMessage(message, delimiter) {\n//     console.log(message.split(delimiter));\n// }\n\n// // 2 вариант\n// function splitMessage(message, delimiter) {\n//     let words;\n//     words = message.split(delimiter);\n//     console.log(words);\n//     return words;\n// }\n// splitMessage(\"Mango hurries to the train\", \" \");\n// splitMessage(\"Mango\", \"\");\n// splitMessage(\"best_for_week\", \"_\");\n\n\n// // autocheck-02-11/32\n// // Сервису гравировки украшений нужна функция, которая бы автоматически считала цену гравировки, в зависимости от количества слов и цены за слово.\n// // Объявлена функция calculateEngravingPrice(message, pricePerWord). Эта функция принимает строку, состоящую из слов разделённых только пробелами (параметр message) и цену гравировки одного слова (параметр pricePerWord).\n// // Напиши тело функции, чтобы она возвращала общую стоимость гравировки всех слов в строке.\n\n\n// // Мой вариант\n// function calculateEngravingPrice(message, pricePerWord) {\n//     let work;\n//     work = message.split(\" \").length * pricePerWord;\n//     console.log(work);\n//     return work;\n// }\n\n// // Решение в автопроверке\n// function calculateEngravingPrice(message, pricePerWord) {\n//     const quantityWords = message.split(' ');\n//     const totalPrice = pricePerWord * quantityWords.length;\n//     return totalPrice;\n// }\n\n// calculateEngravingPrice(\"JavaScript is in my blood\", 10);\n// calculateEngravingPrice(\"JavaScript is in my blood\", 20);\n// calculateEngravingPrice(\"Web-development is creative work\", 40);\n// calculateEngravingPrice(\"Web-development is creative work\", 20);\n\n\n// // autocheck-02-12/32\n// // Дополни код функции makeStringFromArray(array, delimiter) так, чтобы она возвращала в переменной string результат соединения элементов массива array c разделителем delimiter - строку.\n\n// // Мой вариант\n// function makeStringFromArray(array, delimiter) {\n//     console.log(array.join(delimiter));\n//     return;\n// }\n\n// // Решение в автопроверке\n// function makeStringFromArray(array, delimeter) {\n//     let string;\n//     string = array.join(delimeter);\n//     console.log(string);\n//     return string;\n// }\n\n// makeStringFromArray([\"Mango\", \"hurries\", \"to\", \"the\", \"train\"], \" \");\n// makeStringFromArray([\"M\", \"a\", \"n\", \"g\", \"o\"], \"\");\n// makeStringFromArray([\"top\", \"picks\", \"for\", \"you\"], \"_\");\n\n\n// // autocheck-02-13/32\n// // Термин slug - это человеко-понятный уникальный идентификатор, который используется в веб-разработке для создания читабельных URL-адресов.\n// // Например, вместо того чтобы пользователь увидел в адресной строке mysite.com/posts/1q8fh74tx, можно сделать slug из названия статьи. В результате адрес получится более приятным для восприятия: mysite.com/posts/arrays-for-begginers.\n// // Внимание!\n// // Slug это всегда строка в нижнем регистре, слова которой разделены тире.\n// // Напиши функцию slugify(title) которая принимает заголовок статьи, параметр title, и возвращает slug, созданный из этой строки.\n// // - Значением параметра title будут строки, слова которых разделены только пробелами\n// // - Все символы slug должны быть в нижнем регистре\n// // - Все слова slug должна быть разделены тире\n\n// function slugify(title) {\n//     let slug;\n//     slug = title.toLowerCase().split(\" \").join(\"-\");\n//     console.log(slug);\n//     return slug;\n// }\n// slugify(\"Arrays for begginers\");\n// slugify(\"English for developer\");\n// slugify(\"Ten secrets of JavaScript\");\n// slugify(\"How to become a JUNIOR developer in TWO WEEKS\");\n\n\n// // autocheck-02-14/32\n// // Дополни код так, чтобы переменные содержали частичные копии исходного массива fruits.\n// // - firstTwoEls - массив из первых двух элементов\n// // - nonExtremeEls - массив из всех элементов кроме первого и последнего\n// // - lastThreeEls - массив из трёх последних элементов\n\n// const fruits = ['apple', 'plum', 'pear', 'orange', 'banana'];\n// const firstTwoEls = fruits.slice(0, 2);\n// const nonExtremeEls = fruits.slice(1, fruits.length -1);\n// // const lastThreeEls = fruits.slice(2, fruits.length - 0);  //тоже можно\n// const lastThreeEls = fruits.slice(-3);\n// console.log(fruits);\n// console.log(firstTwoEls);\n// console.log(nonExtremeEls);\n// console.log(lastThreeEls);\n\n\n// // autocheck-02-15/32\n// // Дополни код так, чтобы в переменной allClients получился массив всех элементов массивов oldClients и newClients.\n\n// const oldClients = [\"Mango\", \"Ajax\", \"Poly\", \"Kiwi\"];\n// const newClients = [\"Peach\", \"Houston\"];\n// const allClients = oldClients.concat(newClients);\n// console.log(allClients);\n\n\n// // autocheck-02-16/32\n// // Напиши функцию makeArray(firstArray, secondArray, maxLength) для создания нового массива со всеми элементами двух исходных firstArray и secondArray. Параметр maxLength содержит максимально допустимую длину нового массива.\n// // Если количество элементов нового массива больше maxLength, функция должна вернуть копию массива длиной maxLength элементов. В противном случае функция должна вернуть новый массив целиком.\n\n// function makeArray(firstArray, secondArray, maxLength) {\n//     const makeArray = firstArray.concat(secondArray);\n//         if (makeArray.length <= maxLength) {\n//             console.log(makeArray);\n//             return;\n//         } else {\n//             console.log(makeArray.slice(0, maxLength));\n//             return;\n//     }\n//     return;\n// }\n// makeArray([\"Mango\", \"Poly\"], [\"Ajax\", \"Chelsea\"], 3);\n// makeArray([\"Mango\", \"Poly\", \"Houston\"], [\"Ajax\", \"Chelsea\"], 4);\n// makeArray([\"Mango\"], [\"Ajax\", \"Chelsea\", \"Poly\", \"Houston\"], 3);\n// makeArray([\"Earth\", \"Jupiter\"], [\"Neptune\", \"Uranus\"], 2);\n// makeArray([\"Earth\", \"Jupiter\"], [\"Neptune\", \"Uranus\"], 4);\n// makeArray([\"Earth\", \"Jupiter\"], [\"Neptune\", \"Uranus\", \"Venus\"], 0);\n\n\n// // autocheck-02-17/32\n// // Дополни цикл for так, чтобы он логировал все целые числа в диапазоне от start до end включительно.\n\n// const start = 3;\n// const end = 7;\n\n// for (let i = start; i <= end; i +=1) {\n//     console.log(i);\n    \n// }\n\n// // autocheck-02-18/32\n// // Напиши функцию calculateTotal(number), которая принимает целое число (параметр number) и возвращает сумму всех целых чисел от единицы и до этого числа. Например, если number равно 3, то сумма это 1 + 2 + 3, то есть 6.\n\n// function calculateTotal(number) {\n//     let total = 0;\n\n//     for (let i = 0; i < number; i +=1) {\n//         total += i;\n//         // console.log(total);     //выведет все промежуточные операции сложения\n//     }\n    \n//     console.log(total);            //выведет итоговую операцию сложения\n    \n//     return;\n// }\n// calculateTotal(1);                  //0\n// calculateTotal(3);                  //3\n// calculateTotal(7);                  //21\n// calculateTotal(18);                 //153\n// calculateTotal(24);                 //276\n\n\n// // autocheck-02-19/32\n// // Дополни код цикла for так, чтобы он последовательно логировал все элементы массива fruits.\n\n// const fruits = [\"apple\", \"plum\", \"pear\", \"orange\"];\n// for (let i = 0; i < fruits.length; i += 1) {\n//     const fruit = fruits[i];\n//     console.log(fruit);\n// }\n\n\n// // autocheck-02-20/32\n// // Напиши функцию calculateTotalPrice(order), которая принимает один параметр order - массив чисел, и рассчитывает общую сумму его элементов. Общая сумма элементов должна сохраняться в переменной total, которая возвращается, как результат работы функции.\n\n// function calculateTotalPrice(order) {\n//     let total = 0;\n\n//     for (let i = 0; i < order.length; i += 1) {\n//         total += order[i];\n//     }\n\n//     console.log(total);\n//     return;\n// }\n// calculateTotalPrice([12, 85, 37, 4]);           //138\n// calculateTotalPrice([164, 48, 291]);            //503\n// calculateTotalPrice([412, 371, 94, 63, 176]);   //1116\n\n\n// // autocheck-02-21/32\n// // Напиши функцию findLongestWord(string) которая принимает произвольную строку состоящую только из слов разделённых пробелом (параметр string) и возвращает самое длинное слово в этой строке.\n\n// function findLongestWord(string) {\n//     const array = string.split(\" \");\n//     let longestWord = array[0];\n//     for (let i = 1; i <= array.length-1; i += 1) {\n//         if (array[i].length > longestWord.length) {\n//             longestWord = array[i];\n//         };\n//     }\n//     console.log(longestWord);\n//     return;\n// }\n// findLongestWord(\"The quick brown fox jumped over the lazy dog\");\n// findLongestWord(\"Google do a roll\");\n// findLongestWord(\"May the force be with you\");\n\n\n// // autocheck-02-22/32\n// // Дополни код функции createArrayOfNumbers(min, max) так, чтобы она возвращала массив всех целых чисел от значения min до max.\n\n// function createArrayOfNumbers(min, max) {\n//     const numbers = [];\n//     for (let i = min; i <= max; i +=1) {\n//         numbers.push(i);\n//     }\n//     console.log(numbers);\n//     return;\n// }\n// createArrayOfNumbers(1, 3);\n// createArrayOfNumbers(14, 17);\n// createArrayOfNumbers(29, 34);\n\n\n// // autocheck-02-23/32\n// // Напиши функцию filterArray(numbers, value), которая принимает массив чисел (параметр numbers) и возвращает новый массив, в котором будут только те элементы массива numbers, которые больше чем значение параметра value (число).\n\n// function filterArray(numbers, value) {\n//     const newArray = [];\n//     for (const number of numbers) {\n//         if(number > value)\n//         newArray.push(number);\n//     }\n//     console.log(newArray);\n//     return;\n// }\n// filterArray([1, 2, 3, 4, 5], 3);\n// filterArray([1, 2, 3, 4, 5], 4);\n// filterArray([1, 2, 3, 4, 5], 5);\n// filterArray([12, 24, 8, 41, 76], 38);\n// filterArray([12, 24, 8, 41, 76], 20);\n\n\n// // autocheck-02-24/32\n// // Функция checkFruit(fruit) принимает строку с названием фрукта (параметр fruit), и проверяет есть ли такой фрукт в массиве fruits.\n// // Дополни код функции так, что если:\n// // - фрукт есть в массиве, то функция возвращает true;\n// // - фрукта нет в массиве, то функция возвращает false.\n\n// function checkFruit(fruit) {\n//     const fruits = [\"apple\", \"plum\", \"pear\", \"orange\"];\n//     console.log(fruits.includes(fruit));\n//     return;\n// }\n// checkFruit(\"plum\");\n// checkFruit(\"mandarin\");\n// checkFruit(\"pear\");\n// checkFruit(\"Pear\");\n// checkFruit(\"apple\");\n\n\n// // autocheck-02-25/32\n// // Общими элементами массивов называют те элементы, которые присутствуют во всех массивах.\n// // Например, в двух массивах [1, 3, 5] и [0, 8, 5, 3] общими будут числа 3 и 5, т.к. они присутствуют в обоих исходных массивах. А числа 0, 1 и 8 присутствуют только в одном из массивов.\n// // Напиши функцию getCommonElements(array1, array2) которая получает два массива произвольной длины в параметры array1 и array2, и возвращает новый массив, состоящий из тех элементов, которые присутствуют в обоих исходных массивах.\n\n\n// function getCommonElements(array1, array2) {\n//     let array = [];\n\n//     for (let i = 0; i < array1.length; i += 1) {\n//         let arr = array1[i];\n//         if (array2.includes(arr)) {\n//             array.push(array1[i]);\n//         }\n        \n//     }\n//     console.log(array);\n//     return;\n// }\n\n// Решение в автопроверке\n// function getCommonElements(array1, array2) {\n//     const arr = [];\n//     for (let i = 0; i <= array1.length; i += 1) {\n//         if (array2.includes(array1[i])) {\n//             arr.push(array1[i]);\n//         };\n//     }\n//     console.log(arr);\n//     return;\n// }\n\n// getCommonElements([1, 2, 3], [2, 4]);\n// getCommonElements([1, 2, 3], [2, 1, 17, 19]);\n// getCommonElements([24, 12, 27, 3], [12, 8, 3, 36, 27]);\n// getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]);\n// getCommonElements([1, 2, 3], [10, 20, 30]);\n\n\n// // autocheck-02-26/32\n// // Выполни рефакторинг кода функции calculateTotalPrice(order) заменив цикл for на for...of.\n\n// function calculateTotalPrice(order) {\n//     let total = 0;\n\n//     for (let i of order) {\n//         total += i;\n//     }\n\n//     console.log(total);\n//     return;\n// }\n// calculateTotalPrice([12, 85, 37, 4]);\n// calculateTotalPrice([164, 48, 291]);\n// calculateTotalPrice([412, 371, 94, 63, 176]);\n// calculateTotalPrice([]);\n\n\n// // autocheck-02-27/32\n// // Выполни рефакторинг функции filterArray(numbers, value) заменив цикл for на for...of.\n\n// function filterArray(numbers, value) {\n//     const filteredNumbers = [];\n//     for (const number of numbers) {\n//         if(number > value)\n//         filteredNumbers.push(number);\n//     }\n//     console.log(filteredNumbers);\n//     return;\n// }\n// filterArray([1, 2, 3, 4, 5], 3);\n// filterArray([1, 2, 3, 4, 5], 4);\n// filterArray([1, 2, 3, 4, 5], 5);\n// filterArray([12, 24, 8, 41, 76], 38);\n// filterArray([12, 24, 8, 41, 76], 20);\n\n\n// // autocheck-02-28/32\n// // Вместо того, чтобы возвращать результат деления, операция по модулю (%) возвращает целочисленный остаток от деления двух чисел - делимого и делителя.\n// // Дополни выражения остатка от деления так, чтобы код проходил тесты.\n// const a = 3 % 3;\n// const b = 4 % 3;\n// const c = 11 % 8;\n// const d = 12 % 7;\n// const e = 8 % 6;\n// console.log(a);         //0\n// console.log(b);         //1\n// console.log(c);         //3\n// console.log(d);         //5\n// console.log(e);         //2\n\n\n// // autocheck-02-29/32\n// // Напиши функцию getEvenNumbers(start, end) которая возвращает массив всех чётных чисел от start до end. Чётным считается число которое делится на 2 без остатка (10 % 2 === 0).\n\n// function getEvenNumbers(start, end) {\n//     const arr = [];\n//     for (let i = start; i <= end; i += 1) {\n//         if (i % 2 === 0 ) {\n//             arr.push(i);\n//         };\n//     }\n//     console.log(arr);\n//     return;\n// }\n// getEvenNumbers(2, 5);\n// getEvenNumbers(3, 11);\n// getEvenNumbers(6, 12);\n// getEvenNumbers(8, 8);\n// getEvenNumbers(7, 7);\n\n\n// // autocheck-02-30/32\n// // Дополни код так, чтобы в переменную number записывалось первое число от start до end, которое делится на 5 без остатка.\n\n// const start = 6;\n// const end = 27;\n// let number;\n\n// for (let i = start; i <= end; i += 1) {\n//     if (i % 5 === 0) {\n//         number = i;\n//         console.log(i);                     //10\n//         break;\n//     }\n//     return;\n// }\n\n\n// // autocheck-02-31/32\n// Выполни рефакторинг функции findNumber(start, end, divisor) так, чтобы она:\n// - возвращала первое число от start до end, которое делится на divisor без остатка\n// - не использовала оператор break\n// - не использовала переменную number\n\n// function findNumber(start, end, divisor) {\n//     let number;\n\n//     for (let i = start; i < end; i += 1) {\n//         if (i % divisor === 0) {\n//         console.log(i);\n//         return;\n//         };\n//     }\n// }\n// findNumber(2, 6, 5);\n// findNumber(8, 17, 3);\n// findNumber(6, 9, 4);\n// findNumber(16, 35, 7);\n\n\n// // autocheck-02-32/32\n// // Напиши функцию includes(array, value), которая делает тоже самое, что и метод массива массив.includes(значение) - проверяет, есть ли в массиве array значение value, возвращая true если есть и false в противном случае.\n// // При выполнении этой задачи в теле функции includes() нельзя использовать метод массив.includes(значение).\n\n// // Мой вариант\n// // function includes(array, value) {\n// //     let result = array.indexOf(value);\n// //     if (result != -1) {\n// //         console.log(true);\n// //         return;\n// //     } else {\n// //         console.log(false);\n// //         return;\n// //     }\n// // }\n\n// // Решение в автопроверке\n// function includes(array, value) {\n//     let result = array.indexOf(value);\n\n//     for (let i = 0; i <= array.length; i += 1) {\n//         if (result != -1) {\n//             console.log(true);\n//             break;\n//         };\n//         console.log(false);\n//         return;\n//     }\n// }\n// includes([1, 2, 3, 4, 5], 3);\n// includes([1, 2, 3, 4, 5], 17);\n// includes([\"Earth\", \"Mars\", \"Venus\", \"Jupiter\", \"Saturn\"], \"Jupiter\");\n// includes([\"Earth\", \"Mars\", \"Venus\", \"Jupiter\", \"Saturn\"], \"Uranus\");\n// includes([\"apple\", \"plum\", \"pear\", \"orange\"], \"plum\");\n// includes([\"apple\", \"plum\", \"pear\", \"orange\"], \"kiwi\");"],"names":[],"version":3,"file":"index.adad7adc.js.map"}