{"mappings":"AAAA","sources":["src/js/goit-test-04-007.js"],"sourcesContent":["\"use strict\";\n\n// <!-- Лекция 26.09.2022 -->\n\n// Пример работы callback\n// function add(a, b) {\n//     return a + b;\n// }\n\n// console.log(add(1, 2));                         // 1+2=3\n// console.log(add);                               // выведет тело функции add\n\n// const arr = [3, 10];\n\n// function foo(arr, callback) {\n//     const first = arr[0];\n//     const second = arr[1];\n//     const result = callback(first, second);\n//     console.log(result);                        // 3+10=13\n// };\n\n// foo(arr, add);\n\n\n// // Добавление id и вывод суммы\n// function createProduct(partialProduct, callback) {          // 1. идет к callback(obj)\n//     const obj = {\n//         id: Date.now(),\n//         ...partialProduct\n//     }\n//     callback(obj);                                          // 2. считывает параметры в logProduct\n// };\n\n// function logProduct(product) {\n//     console.log(product);\n// };\n\n// function logTotalPrice(product) {\n//     console.log(product.price * product.quantity);\n//     return product.price * product.quantity;\n// };\n\n// createProduct({\n//     name: 'strawberry',\n//     price: 30,\n//     quantity: 3\n// }, logProduct);                                             // 3. идет к logProduct(product)\n\n// createProduct({\n//     name: 'lemon',\n//     price: 20,\n//     quantity: 5\n// }, logProduct );\n\n// createProduct({\n//     name: 'strawberry',\n//     price: 30,\n//     quantity: 3\n// }, logTotalPrice);\n\n// createProduct({\n//     name: 'lemon',\n//     price: 20,\n//     quantity: 5\n// }, logTotalPrice );\n\n\n// // Операции с банковским счетом\n\n// const TRANSACTION_LIMIT = 1000;\n\n// const account = {\n//     username: 'Jacob',\n//     balance: 2400,\n//     withdraw(amount, onSuccess, onError) {\n//         if (amount > this.balance) {\n//             onError('Мало средств');\n//         } else if (amount > TRANSACTION_LIMIT) {\n//             onError('Превышен лимит');\n//         } else {\n//             this.balance -= amount;\n//             onSuccess(`Списано ${amount}, остаток ${this.balance}`);\n//         };\n//     },\n//     deposit(amount, onSuccess, onError) {\n//         if (amount <= 0) {\n//             onError('Значение должно быть больше 0');\n//         } else if (amount > TRANSACTION_LIMIT) {\n//             onError('Превышен лимит');\n//         } else {\n//             this.balance += amount;\n//             onSuccess(`Внесено ${amount}, остаток ${this.balance}`);\n//         };\n//     },\n// };\n\n// function handleSuccess(message) {\n//     console.log(`Success! ${message}`);\n// };\n\n// function handleError(message) {\n//     console.log(`Error! ${message}`);\n// };\n\n// account.withdraw(2400, handleSuccess, handleError);\n// account.withdraw(2000, handleSuccess, handleError);\n// account.withdraw(300, handleSuccess, handleError);\n\n// account.deposit(1700, handleSuccess, handleError);\n// account.deposit(0, handleSuccess, handleError);\n// account.deposit(-600, handleSuccess, handleError);\n// account.deposit(600, handleSuccess, handleError);\n\n\n// // Создание нового массива\n\n// function each(array, callback) {\n//     for (const element of array) {\n//         console.log(callback(element));\n//     }\n// }\n\n// each( [64, 49, 36, 25, 16], function (value) {\n//     return value * 2;\n// });\n\n// console.log(\n    // each( [64, 49, 36, 25, 16], function (value) {\n    //     return value - 10;\n    // })\n// );\n\n// console.log(\n    // each( [64, 49, 36, 25, 16], function (value) {\n    //     return Math.sqrt(value);\n    // })\n// );\n\n// console.log(\n    // each( [1.5, 2.1, 16.4, 9.7, 11.3], function (value) {\n    //     return Math.ceil(value);\n    // })\n// );\n\n// console.log(\n//     each( [1.5, 2.1, 16.4, 9.7, 11.3], function (value) {\n//         return Math.floor(value);\n//     })\n// );\n\n\n// Стрелочные функции\n// // - анонимные функции - function declaration\n// foo();\n// function (value) {\n//     return value * 2;\n// }\n// // - вызывется только после оглашения - function expression\n// const boo = function (value) {\n//     return value * 2;\n// };\n// boo();\n// // - стрелочная arrow function\n// const boo = (value) => {\n    \n// };\n\n\n// // Добавление id и вывод суммы. Рефакторинг\n\n// // function createProduct(partialProduct, callback) {\n// //     const obj = {\n// //         id: Date.now(),\n// //         ...partialProduct\n// //     }\n// //     callback(obj);\n// // };\n\n// // function logProduct(product) {\n// //     console.log(product);\n// // };\n\n// // function logTotalPrice(product) {\n// //     console.log(product.price * product.quantity);\n// //     return product.price * product.quantity;\n// // };\n\n// const createProduct = (partialProduct, callback) => {\n//     const obj = {\n//         id: Date.now(),\n//         ...partialProduct\n//     }\n//     callback(obj);\n// };\n\n// const logProduct = (product) => console.log(product);\n\n// const logTotalPrice = (product) => console.log(product.price * product.quantity);\n\n// createProduct({\n//     name: 'strawberry',\n//     price: 30,\n//     quantity: 3\n// }, logProduct);\n\n\n// createProduct({\n//     name: 'strawberry',\n//     price: 30,\n//     quantity: 3\n// }, logTotalPrice);\n\n\n\n// // Создание нового массива. Рефакторинг\n\n// const each = (array, callback) => {\n//     const newArr = [];\n//     for (const el of array) {\n//         newArr.push(callback(el));\n//     }\n//     return newArr;\n// };\n\n// console.log(\n//     each( [64, 49, 36, 25, 16], value => value * 2)\n// );\n\n// console.log(\n//     each( [64, 49, 36, 25, 16], value => (value - 10))\n// );\n\n// console.log(\n//     each( [64, 49, 36, 25, 16], value => Math.sqrt(value))\n// );\n\n// console.log(\n//     each( [1.5, 2.1, 16.4, 9.7, 11.3],  value => Math.ceil(value))\n// );\n\n// console.log(\n//     each( [1.5, 2.1, 16.4, 9.7, 11.3],  value => Math.floor(value))\n// );\n\n\n// // Метод forEach. Рефакторинг\n\n// const logItems = items => {\n//     // console.log(items);\n\n//     items.forEach((item, idx, arr) => console.log(`${idx + 1 } - ${item}`));\n\n//     // for (let i = 0; i < items.length; i += 1) {\n//     //     console.log(`${i + 1 } - ${items[i]}`);\n//     // };\n// };\n// logItems(['Mango', 'Poly', 'Ajax']);\n// logItems(['strawberry', 'grape', 'peach', 'banana', 'lemon',]);\n\n\n// // Перебор ключей и значений - метод forEach\n\n// const printContactsInfo = ({ names, phones }) => {\n//     const nameList = names.split(',');\n//     const phoneList = phones.split(',');\n\n//     // // for (index) может принимать 2 и больше условия, а также выполняет команды break и continue\n//     // for (let i = 0; i < nameList.length, i < phoneList.length; i += 1) {\n//     //     console.log(`${nameList[i]}: ${phoneList[i]}`);\n//     // }\n\n//     // forEach принимает только 1 условие и его невозможно прервать\n//     nameList.forEach((el, idx) => {\n//         console.log(`${el}: ${phoneList[idx]}`);\n//     })\n// };\n// printContactsInfo({\n//     names: 'Jacob,William,Solomon,Anna,Artem',                              //Artem: undefined\n//     phones: '89001234567,89001112233,89005556677,890055566300'\n//     }\n// );\n\n\n// // Метод forEach. Рефакторинг\n\n// // function calculateAverage(...args) {\n// //     let total = 0;\n// //     for (let i = 0; i < args.length; i+=1) {\n// //         total += args[i];\n// //     };\n// //     return total / args.length;\n// // };\n\n// const calculateAverage = (...args) => {\n//     let total = 0;\n//     console.log(args);\n//     args.forEach(el => total += el );\n//     return total / args.length;\n// };\n// console.log(calculateAverage(1,2,3,4));                 // 2.5\n// console.log(calculateAverage(14,8,2));                  // 8\n// console.log(calculateAverage(27,43,2,8,36));            // 23.2\n\n"],"names":[],"version":3,"file":"index.2d4e8a1e.js.map"}