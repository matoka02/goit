{"mappings":"AAyIA,MAAMA,EAAkB,IA/BjB,MACHC,GACAC,GACAC,YAAYC,GACRC,MAAKJ,EAAYG,EACjBC,MAAKH,EAAW,CACZI,QAAS,C,GAMjBC,eAAeC,EAAQ,GACvB,OAAOC,MAAM,GAAGJ,MAAKJ,oBAA4BO,IAASH,MAAKH,GAAUQ,MAAKC,IAC1E,IAAIA,EAAKC,GACL,MAAM,IAAIC,MAAMF,EAAKG,YAEzB,OAAOH,EAAKI,MAAM,IACnBC,OAAMC,GAAOC,QAAQC,IAAIF,I,CAG5BG,cAAcZ,EAAQ,GAClB,OAAOC,MAAM,GAAGJ,MAAKJ,mBAA2BO,KAASE,MAAKC,IAC1D,IAAIA,EAAKC,GACL,MAAM,IAAIC,MAAMF,EAAKG,YAEzB,OAAOH,EAAKI,MAAM,IACnBC,OAAMC,GAAOC,QAAQC,IAAIF,I,GAIJ,mCAGhCjB,EAAgBO,iBAAiBG,MAAKW,GAAQH,QAAQC,IAAIE,KAC1DrB,EAAgBoB,gBAAgBV,MAAKW,GAAQH,QAAQC,IAAIE","sources":["src/js/goit-test-11-021.js"],"sourcesContent":["\"use strict\";\n\n// <!-- Лекция 25.11.2022 -->\n\n\n// тестовый публичный сервис\n// https://jsonplaceholder.typicode.com/posts\n// SOAP API\n// https://habr.com/ru/post/483204/\n// https://firebase.google.com/\n\n// // пример запроса\n// const obj = {\n//     name: 'User',\n//     email: 'test@gmail.com',\n//     age: 22,\n// }\n\n// fetch('https://mysite/', {\n//     method: 'PATCH',\n//     body: JSON.stringify({\n//         email: 'test2@gmail.com'\n//     })\n// })\n\n\n// // Create = POST\n\n// const options = {\n//     method: 'POST',\n//     body: JSON.stringify({\n//         author: \"Mango\",\n//         body: \"CRUD is awesome\",\n//     }),\n//     headers: {\n//         \"Content-Type\": \"application/json; charset=UTF-8\",\n//     },\n// };\n\n// fetch('https://jsonplaceholder.typicode.com/posts', options)\n// .then(resp => resp.json())\n// .then(data => console.log(data));\n\n\n// // Read = GET\n\n// const options = {\n//     method: 'GET',\n//     headers: {\n//         \"Content-Type\": \"application/json; charset=UTF-8\",\n//     },\n// };\n\n// fetch('https://jsonplaceholder.typicode.com/posts', options)\n// .then(resp => resp.json())\n// .then(data => console.log(data));   // 100 обьктов в массиве\n\n\n// // Update = PATCH\n\n// const obj = {\n//     name: 'Mango',\n//     age: 22,\n//     id: 1\n// }\n\n// fetch(`https://jsonplaceholder.typicode.com/posts/1`, {\n//     method: 'PATCH',\n//     body: JSON.stringify({\n//         name: 'Poly'\n//     })\n// })\n// .then(resp => resp.json())\n// .then(data => console.log(data));\n\n\n// // Update = PATCH\n\n// const obj = {\n//     name: 'Mango',\n//     age: 22,\n//     id: 1\n// }\n\n// fetch(`https://jsonplaceholder.typicode.com/posts/1`, {\n//     method: 'PUT',\n//     body: JSON.stringify({\n//         author: 'Poly'\n//     })\n// })\n// .then(resp => resp.json())\n// .then(data => console.log(data));\n\n\n// // Delete = DELETE\n\n// fetch(`https://jsonplaceholder.typicode.com/posts/1`, {\n//     method: 'DELETE',\n// })\n// .then(resp => resp.json())\n// .then(data => console.log(data));       // пустой объект\n\n\n// Постройка запроса в классе\n\n// https://rickandmortyapi.com/documentation/#location-schema\nexport class API {\n    #BASE_URL;\n    #options;\n    constructor(url) {\n        this.#BASE_URL = url;\n        this.#options = {\n            headers: {\n                // место для ключа авторизации\n            }\n        }\n    };\n\n    fetchCharacter(value = 1) {\n    return fetch(`${this.#BASE_URL}/character?page=${value}`, this.#options).then(resp => {\n        if(!resp.ok){\n            throw new Error(resp.statusText)\n        }\n        return resp.json()\n    }).catch(err => console.log(err))\n    };\n\n    fetchLocation(value = 1){\n        return fetch(`${this.#BASE_URL}/location?page=${value}`).then(resp => {\n            if(!resp.ok){\n                throw new Error(resp.statusText)\n            }\n            return resp.json()\n        }).catch(err => console.log(err))\n    };\n};\n\nconst rickandmortyApi = new API('https://rickandmortyapi.com/api')\n// console.log(rickandmortyApi);\n\nrickandmortyApi.fetchCharacter().then(data => console.log(data))    // 20 arrays\nrickandmortyApi.fetchLocation().then(data => console.log(data))     // 20 arrays\n\n\n\n"],"names":["$5edd9cda1e4cb979$var$rickandmortyApi","BASE_URL","options","constructor","url","this","headers","fetchCharacter","value","fetch","then","resp","ok","Error","statusText","json","catch","err","console","log","fetchLocation","data"],"version":3,"file":"goit-test-11-021.4e636c35.js.map"}