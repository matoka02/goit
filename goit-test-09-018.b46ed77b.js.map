{"mappings":"AAcgB,IAAIA,SAAQ,CAACC,EAAKC,KACfC,KAAKC,SAET,GACPH,EAAI,IAEJC,EAAI,SAAS,IAQpBG,MAAMJ,IAOHK,QAAQC,IAAIN,EAAI,IACjBO,OAAMC,GAAOH,QAAQC,IAAIE,KAC3BC,SAAQ","sources":["src/js/goit-test-09-018.js"],"sourcesContent":["\"use strict\";\n\n// <!-- Лекция 11.11.2022 -->\n\n\n// // 1. Асинхронный код\n\n// // макропроцесс => call Steck => webAPI call Steck, если синхронный код и микропроцессы выполнены\n// setTimeout(()=>{'setTimeout'});\n// // микропроцесс => call Steck => webAPI => call Steck, если синхронный код выполнен\n// Promise.resolve().then(()=>{console.log('Promise');});\n// // синхронный код => call Steck \n// console.log('object');\n\nconst promise = new Promise((res, rej)=>{\n    const random = Math.random();\n\n    if (random>0.5) {\n        res(20);\n    } else{\n        rej('Error!');\n    }\n});\n// console.log(promise);           // Promise {<rejected>: 10}\n\n// promise.then((res)=>{console.log(res);},(err)=>{console.log(err);});                          // Error\n\npromise\n.then((res)=>{\n    //\n    //\n    //\n    //\n    //\n    //\n    console.log(res);                       // 20\n}).catch(err => console.log(err))          // Error\n.finally(()=>{\n    //\n})"],"names":["Promise","res","rej","Math","random","then","console","log","catch","err","finally"],"version":3,"file":"goit-test-09-018.b46ed77b.js.map"}