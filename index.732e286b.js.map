{"mappings":"AAAA","sources":["src/js/goit-test-05-009.js"],"sourcesContent":["\"use strict\";\n\n// <!-- Лекция 05.10.2022 -->\n\n\n// // \"use strict\";\n// // 3. function declaration: undefind при \"use strict\"\n// function foo() {\n//     console.log(this);         // f\n// };\n// // 2. объект, в свойстве ссылка на функцию\n// const obj = {\n//     logCtx: foo\n// };\n// // 1.\n// obj.logCtx();\n\n// // \"use strict\";\n// // 3. объект, в свойстве функция\n// const objA = {\n// // function declaration\n//     logCtx() {\n//         console.log(this);      // {foo: f}\n//     }\n// };\n// // 2. объект, в свойстве ссылка на функцию\n// const objB = {\n//     foo: objA.logCtx\n// };\n// // 1.\n// objB.foo();\n\n\n// // \"use strict\";\n// const foo = () => console.log(this);    // Window\n\n\n// const obj = {\n//     // arrow function, ее this ссылается на родительскую сущность\n//     foo: () => console.log(this)        // Window\n// };\n// obj.foo();\n\n\n// // arrow function, ее this ссылается на родительскую сущность, в которой пустая функция\n// const foo = () => console.log(this);        // Window\n// const obj = {\n//     logCtx: foo\n// };\n// obj.logCtx();\n\n\n// // <!-- Методы apply и call-->\n\n// function foo(a, b) {\n//     console.log('this =>', this, 'a =>', a, 'b =>', b);\n// };\n// function boo() {\n//     console.log(this);\n// };\n\n// // apply передает аргументы как массив\n// foo.apply({}, [1, boo]);\n// // call передает аргументы как список\n// foo.call({}, 1, boo);\n\n\n// // <!-- Метод bind-->\n\n// function foo(a, b) {\n//     console.log('this =>', this, 'a =>', a, 'b =>', b);\n// };\n// const testObj = {\n//     name: 'my Test'\n// }\n// const boo = foo.bind(testObj, 1, 2);\n// // вот эти аргументы не перезапишутся, если при объявлении были указаны\n// boo(3, 4);\n// boo(4, 5);\n\n// const obj = {\n//     name: 'my name',\n//     sayHello() {\n//         console.log('say', this.name);      // say my name\n\n//         function boo() {\n//             console.log('boo', this);       // boo {name: 'my name', sayHello: ƒ}\n//         }\n//         // this от sayHello\n//         boo.call(this)\n//     }\n// }\n// obj.sayHello()\n\n\n// // 1. Мастерская камней\n\n// const myShop = {\n//     stones: [\n//         {\n//             name: 'Emerald',\n//             price: 1300,\n//             quantity: 4\n//         },\n//         {\n//             name: 'Diamond',\n//             price: 2700,\n//             quantity: 3\n//         },\n//         {\n//             name: 'Sapphire',\n//             price: 1400,\n//             quantity: 7\n//         },\n//         {\n//             name: 'Ruby',\n//             price: 800,\n//             quantity: 2\n//         },\n//     ],\n\n//     calcTotalPrice(stoneName) {\n//         // return this.stones.reduce((acc, stone) => {\n//         //     if (stone.name === stoneName) {\n//         //         return stone.price * stone.quantity\n//         //     }\n//         //     return acc\n//         // }, 0);\n\n//         // рефакторинг\n//         return this.stones.reduce((acc, {name, price, quantity}) => name === stoneName? price * quantity : acc, 0);\n        \n//         // // метод find\n//         // const {price, quantity} = this.stones.find((item) => item.name === stoneName);\n//         // return price * quantity;\n//     },\n// }\n// console.log(myShop.calcTotalPrice('Emerald'));\n// console.log(myShop.calcTotalPrice('Diamond'));\n// console.log(myShop.calcTotalPrice('Sapphire'));\n// console.log(myShop.calcTotalPrice('Ruby'));\n// console.log(myShop.calcTotalPrice('Phosphophyllite'));\n\n\n// // 2. Телефонная книга\n\n// const phonebook = {\n//     contacts: [],\n\n//     add(contact) {\n//         const newContact = {\n//             list: 'default',\n//             ...contact,\n// // 1. другая функция не скопирует методы объекта из-за this\n//             // id: this.generateId(),\n//             // createdAt: this.getDate(),\n// // 2. другая функция скопирует методы объекта\n//             // id: phonebook.generateId(),\n//             // createdAt: phonebook.getDate(),\n//             id: this.generateId(),\n//             createdAt: this.getDate(),\n//         };\n//         this.contacts.push(newContact);\n//         return this.contacts;\n//     },\n// // 1, 2\n//     generateId() {\n//         return '_' + Math.random().toString(36).substr(2,9);\n//     },\n//     getDate() {\n//         return Date.now();\n//     },\n\n// }\n\n// // console.log(\n// //     phonebook.add({\n// //         name: 'Mango',\n// //         email: 'mango@mail.com',\n// //         list: 'friends'\n// //     })\n// // );\n// // console.log(\n// //     phonebook.add({\n// //         name: 'Poly',\n// //         email: 'poly@mail.com',\n// //         list: 'friends'\n// //     })\n// // );\n\n// const newPhoneBook = {\n//     contacts: [],\n// }\n// console.log(phonebook.add.call(newPhoneBook, {\n//         name: 'Mark',\n//         email: 'mark@mail.com',\n//         list: 'friends'\n//     })  );\n\n\n// // 3. Калькулятор\n\n// const calculator = {\n//     read(c, d) {\n//         this.a = c;\n//         this.b = d;\n//     },\n//     add(){\n//         return this.a + this.b\n//     },\n//     mult() {\n//         return this.a * this.b\n//     }\n// };\n// console.log('before', calculator);                    // before {read: ƒ}\n// calculator.read(5, 2)\n// console.log('after', calculator);                    // after {a: 5, b: 2, read: ƒ}\n// console.log(calculator.add());              // 7\n// console.log(calculator.mult());             // 10\n"],"names":[],"version":3,"file":"index.732e286b.js.map"}