{"mappings":"AAAA","sources":["src/js/goit-autocheck-04.js"],"sourcesContent":["\"use strict\";\n\n\n// // autocheck-04-1/48\n// // Дополни код так, чтобы в переменной result был результат выполнения функции makePizza, а в переменной pointer была ссылка на функцию makePizza.\n\n// function makePizza() {\n//     return \"Your pizza is being prepared, please wait.\";\n// }\n\n// const result = makePizza();         // выведет р-т выполнения функции: \"Your pizza is being prepared, please wait.\"\n// const pointer = makePizza;          // выведет тело функции: ƒ makePizza() {return \"Your pizza is being prepared, please wait.\";}\n// console.log(result);\n// console.log(pointer);\n\n\n// // autocheck-04-2/48\n// // Дополни функцию makeMessage так, чтобы она ожидала вторым параметром (параметр callback) колбэк-функцию и возвращала ее вызов. Функция deliverPizza или makePizza будет передаваться как колбэк и ожидать аргументом имя готовой доставляемой пиццы.\n\n// function deliverPizza(pizzaName) {\n//     console.log(`Delivering ${pizzaName} pizza.`);\n//     return `Delivering ${pizzaName} pizza.`;\n// };\n// function makePizza(pizzaName) {\n//     console.log(`Pizza ${pizzaName} is being prepared, please wait...`);\n//     return `Pizza ${pizzaName} is being prepared, please wait...`;\n// };\n// // higher order function\n// // имя функции с (параметр, колбэк)\n// function makeMessage(pizzaName, callback) {\n//     console.log(callback(pizzaName));\n// // возвращение колбэка с (параметр):\n// // - если (makePizza)-- > выполнение функции makePizza;\n// // - если (deliverPizza)-- > выполнение функции deliverPizza;\n//     return callback(pizzaName);\n// };\n\n// makeMessage(\"Royal Grand\", makePizza);\n// makeMessage(\"Ultracheese\", deliverPizza);\n\n\n// // autocheck-04-3/48\n// // Дополни второй вызов функции makePizza(pizzaName, callback), передав вторым аргументом инлайн колбэк-функцию eatPizza(pizzaName), которая логирует строку \"Eating pizza <имя пиццы>\".\n\n// function makePizza(pizzaName, callback) {\n//     console.log(`Pizza ${pizzaName} is being prepared, please wait...`);\n//     callback(pizzaName);\n// }\n// // инлайн колбэк-функция\n// makePizza(\"Royal Grand\", function deliverPizza(pizzaName) {\n//     console.log(`Delivering pizza ${pizzaName}.`);\n// });\n// // инлайн колбэк-функция\n// makePizza(\"Ultracheese\", function eatPizza(pizzaName) {\n//     console.log(`Eating pizza ${pizzaName}.`);\n// });\n\n\n// // autocheck-04-4/48\n// Необходимо написать логику обработки заказа пиццы. Выполни рефакторинг метода order так, чтобы он принимал вторым и третим параметрами два колбэка onSuccess и onError.\n// - Если в свойстве pizzas нет пиццы с названием из параметра pizzaName, метод order должен возвращать результат вызова колбэка onError, передавая ему аргументом строку \"There is no pizza with a name <имя пиццы> in the assortment.\"\n// - Если в свойстве pizzas есть пицца с названием из параметра pizzaName, метод order должен возвращать результат вызова колбэка onSuccess, передавая ему аргументом имя заказанной пиццы.\n// После объявления объекта pizzaPalace мы добавили колбэки и вызовы методов. Пожалуйста ничего там не меняй.\n\n// const pizzaPalace = {\n//     pizzas: ['Ultracheese', 'Smoked', 'Four meats'],\n//     order(pizzaName, onSuccess, onError) {\n//         if (this.pizzas.includes(pizzaName)) {\n//             console.log(onSuccess(pizzaName));\n//             return onSuccess(pizzaName);\n//         }\n//         console.log(onError(`There is no pizza with a name ${pizzaName} in the assortment.`));\n//         return onError(`There is no pizza with a name ${pizzaName} in the assortment.`);\n//     },\n// };\n// // Callback for onSuccess\n// function makePizza(pizzaName) {\n//     return `Your order is accepted. Cooking pizza ${pizzaName}.`;\n// }\n// // Callback for onError\n// function onOrderError(error) {\n//     return `Error! ${error}`;\n// }\n// // Method calls with callbacks\n// pizzaPalace.order('Smoked', makePizza, onOrderError);\n// pizzaPalace.order('Four meats', makePizza, onOrderError);\n// pizzaPalace.order('Big Mike', makePizza, onOrderError);\n// pizzaPalace.order('Vienna', makePizza, onOrderError);\n\n\n// // autocheck-04-5/48\n// // Функция calculateTotalPrice(orderedItems) принимает один параметр orderedItems - массив чисел, и рассчитывает общую сумму его элементов, которая сохраняется в переменной totalPrice и возвращается как результат работы функции.\n// // Выполни рефакторинг функции так, чтобы вместо цикла for она использовала метод forEach.\n\n// function calculateTotalPrice(orderedItems) {\n//     let totalPrice = 0;\n//     // Change code below this line\n\n//     orderedItems.forEach((el) => {\n//         totalPrice += el;\n//     });\n//     console.log(totalPrice);\n//     // Change code above this line\n//     return totalPrice;\n// }\n// calculateTotalPrice([12, 85, 37, 4]);\n// calculateTotalPrice([164, 48, 291]);\n// calculateTotalPrice([412, 371, 94, 63, 176]);\n\n\n// // autocheck-04-6/48\n// // Функция filterArray(numbers, value) принимает массив чисел numbers и возвращает новый массив, в котором будут только те элементы оригинального массива, которые больше чем значение параметра value.\n// // Выполни рефакторинг функции так, чтобы вместо цикла for она использовала метод forEach.\n\n// function filterArray(numbers, value) {\n    \n//     const filteredNumbers = [];\n\n//     numbers.forEach((el, idx) => {\n\n//         if (numbers[idx] > value) {\n//             filteredNumbers.push(el)\n//         }\n//     });\n\n//     console.log(filteredNumbers);\n//     return filteredNumbers;\n// }\n// filterArray([1, 2, 3, 4, 5], 3);\n// filterArray([1, 2, 3, 4, 5], 4);\n// filterArray([1, 2, 3, 4, 5], 5);\n// filterArray([12, 24, 8, 41, 76], 38);\n// filterArray([12, 24, 8, 41, 76], 20);\n// filterArray([22,21,18,7,15,22,5,18,15,18,22,11,15,21,17,21,23,17], 15);\n\n\n// // autocheck-04-7/48\n// // Функция getCommonElements(firstArray, secondArray) принимает два массива произвольной длины в параметры firstArray и secondArray, и возвращает новый массив их общих элементов, то есть тех которые есть в обоих массивах.\n// // Выполни рефакторинг функции так, чтобы вместо цикла for она использовала метод forEach.\n// function getCommonElements(firstArray, secondArray) {\n//     const commonElements = [];\n\n//     firstArray.forEach((el, idx) => {\n//         if (secondArray.includes(firstArray[idx])) {\n//             commonElements.push(firstArray[idx])\n//         }\n//     });\n    \n//     console.log(commonElements);\n\n//     return commonElements;\n// }\n// getCommonElements([1, 2, 3], [2, 4]);\n// getCommonElements([1, 2, 3], [2, 1, 17, 19]);\n// getCommonElements([24, 12, 27, 3], [12, 8, 3, 36, 27]);\n// getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]);\n// getCommonElements([1, 2, 3], [10, 20, 30]);\n// getCommonElements([5,17,24,20,12,17,19,20,19,12,15,20,20,6,12,21,21,20,8], [24,15,17,8,20,22,12,12,11,9,7,11,23,15,16,5,8,19,16]);\n\n\n// // autocheck-04-8/48\n// // Выполни рефакторинг функции calculateTotalPrice() так, чтобы она была объявлена как стрелочная.\n\n// const calculateTotalPrice = (quantity, pricePerItem) => {\n\n//     console.log(quantity * pricePerItem);\n//     return quantity * pricePerItem;\n// };\n// calculateTotalPrice(5, 100);\n// calculateTotalPrice(8, 60);\n// calculateTotalPrice(3, 400);\n\n\n// // autocheck-04-9/48\n// // Выполни рефакторинг функции calculateTotalPrice() так, чтобы она использовала неявный возврат.\n\n// const calculateTotalPrice = (quantity, pricePerItem) =>\n//     quantity * pricePerItem;\n\n// calculateTotalPrice(5, 100);\n// calculateTotalPrice(8, 60);\n// calculateTotalPrice(3, 400);\n// calculateTotalPrice(7, 15);\n\n\n// // autocheck-04-10/48\n// Выполни рефакторинг функции calculateTotalPrice(orderedItems) заменив её объявление на стрелочную функцию. Замени коллбек-функцию передаваемую в метод forEach() на стрелочную функцию.\n// const calculateTotalPrice = (orderedItems) => {\n//     let totalPrice = 0;\n\n//     orderedItems.forEach( (item) => {\n//         totalPrice += item;\n//     });\n//     console.log(totalPrice);\n//     return totalPrice;\n// };\n// calculateTotalPrice([12, 85, 37, 4]);\n// calculateTotalPrice([164, 48, 291]);\n// calculateTotalPrice([412, 371, 94, 63, 176]);\n// calculateTotalPrice([10,7,14,5,5,6,22,22,23,7,9]);\n\n\n// // autocheck-04-11/48\n// // Замени объявление функции filterArray() и коллбек для метода forEach() на стрелочные функции.\n// const filterArray = (numbers, value) => {\n//     const filteredNumbers = [];\n\n//     numbers.forEach( (number) => {\n//         if (number > value) {\n//             filteredNumbers.push(number);\n//         }\n//     });\n\n//     console.log(filteredNumbers);\n//     return filteredNumbers;\n// }\n// filterArray([1, 2, 3, 4, 5], 3);\n// filterArray([1, 2, 3, 4, 5], 4);\n// filterArray([1, 2, 3, 4, 5], 5);\n// filterArray([12, 24, 8, 41, 76], 38);\n// filterArray([12, 24, 8, 41, 76], 20);\n// filterArray([15,16,21,13,12,5,20,21,12,16], 15);\n\n\n// // autocheck-04-12/48\n// // Замени объявление функции getCommonElements() и коллбек для метода forEach() на стрелочные функции.\n// const getCommonElements = (firstArray, secondArray) => {\n//     const commonElements = [];\n\n//     firstArray.forEach( (element) => {\n//         if (secondArray.includes(element)) {\n//             commonElements.push(element);\n//         }\n//     });\n//     console.log(commonElements);\n//     return commonElements;\n// }\n// getCommonElements([1, 2, 3], [2, 4]);\n// getCommonElements([1, 2, 3], [2, 1, 17, 19]);\n// getCommonElements([24, 12, 27, 3], [12, 8, 3, 36, 27]);\n// getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]);\n// getCommonElements([1, 2, 3], [10, 20, 30]);\n// getCommonElements([15,18,22,8,5,14,18,14,8,17,9,22,13,7,13,8,18,23,9,22], [16,5,14,10,21,21,23,24,18,19,14,19,9,19,21,23,23,22,21,20]);\n\n\n// // autocheck-04-13/48\n// // Функция changeEven(numbers, value) принимает массив чисел numbers и обновляет каждый элемент, значение которого это чётное число, добавляя к нему значение параметра value.\n// // Выполни рефакторинг функции так, чтобы она стала чистой - не изменяла массив чисел numbers, а создавала, наполняла и возвращала новый массив с обновлёнными значениями.\n\n// function changeEven(numbers, value) {\n\n//     const pureChangeEven = [];\n\n//     numbers.forEach((element) => {\n//         if (element % 2 === 0) {\n//             element = element + value;\n//             pureChangeEven.push(element);\n//         } else {\n//             pureChangeEven.push(element);\n//         }\n//     });\n\n//     console.log(pureChangeEven);\n//     return pureChangeEven;\n// };\n// changeEven([1, 2, 3, 4, 5], 10);\n// changeEven([2, 8, 3, 7, 4, 6], 10);\n// changeEven([17, 24, 68, 31, 42], 100);\n// changeEven([44, 13, 81, 92, 36, 54], 100);\n// changeEven([19,16,12,9,20,10,8,21,17,7,5], 11);\n\n\n// // autocheck-04-14/48\n// // Дополни код так, чтобы в переменной planetsLengths получился массив длин названий планет. Обязательно используй метод map().\n\n// const planets = [\"Earth\", \"Mars\", \"Venus\", \"Jupiter\"];\n\n// const planetsLengths = planets.map(planet => planet.length);\n// console.log(planetsLengths);\n\n\n// // autocheck-04-15/48\n// // Используя метод map() сделай так, чтобы в переменной titles получился массив названий книг (свойство title) из всех объектов массива books.\n\n// const books = [\n//     {\n//         title: \"The Last Kingdom\",\n//         author: \"Bernard Cornwell\",\n//         rating: 8.38,\n//     },\n//     {\n//         title: \"Beside Still Waters\",\n//         author: \"Robert Sheckley\",\n//         rating: 8.51,\n//     },\n//     {\n//         title: \"The Dream of a Ridiculous Man\",\n//         author: \"Fyodor Dostoevsky\",\n//         rating: 7.75,\n//     },\n//     {\n//         title: \"Redder Than Blood\",\n//         author: \"Tanith Lee\",\n//         rating: 7.94\n//     },\n//     {\n//         title: \"Enemy of God\",\n//         author: \"Bernard Cornwell\",\n//         rating: 8.67\n//     },\n// ];\n\n// const titles = books.map(book => book.title);\n// console.log(titles);\n//  // (5) ['The Last Kingdom', 'Beside Still Waters', 'The Dream of a Ridiculous Man', 'Redder Than Blood', 'Enemy of God']\n\n\n// // autocheck-04-16/48\n// // Используя метод flatMap() сделай так, чтобы в переменной genres получился массив всех жанров книг (свойство genres) из массива книг books.\n\n// const books = [\n//     {\n//         title: \"The Last Kingdom\",\n//         author: \"Bernard Cornwell\",\n//         genres: [\"adventure\", \"history\"],\n//     },\n//     {\n//         title: \"Beside Still Waters\",\n//         author: \"Robert Sheckley\",\n//         genres: [\"fiction\"],\n//     },\n//     {\n//         title: \"Redder Than Blood\",\n//         author: \"Tanith Lee\",\n//         genres: [\"horror\", \"mysticism\"],\n//     },\n// ];\n\n// const genres = books.flatMap(book => book.genres);\n// console.log(genres);\n//  // (5) ['adventure', 'history', 'fiction', 'horror', 'mysticism']\n\n\n// // autocheck-04-17/48\n// // Дополни функцию getUserNames(users) так, чтобы она возвращала массив имён пользователей (свойство name) из массива объектов в параметре users.\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     skills: [\"ipsum\", \"lorem\"],\n//     gender: \"male\",\n//     age: 37,\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     skills: [\"tempor\", \"mollit\", \"commodo\", \"veniam\", \"laborum\"],\n//     gender: \"female\",\n//     age: 34,\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     skills: [\"nulla\", \"anim\", \"proident\", \"ipsum\", \"elit\"],\n//     gender: \"male\",\n//     age: 24,\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     skills: [\"adipisicing\", \"irure\", \"velit\"],\n//     gender: \"female\",\n//     age: 21,\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     skills: [\"ex\", \"culpa\", \"nostrud\"],\n//     gender: \"male\",\n//     age: 27,\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     skills: [\"non\", \"amet\", \"ipsum\"],\n//     gender: \"male\",\n//     age: 38,\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     skills: [\"lorem\", \"veniam\", \"culpa\"],\n//     gender: \"female\",\n//     age: 39,\n//   },\n// ];\n\n// // мой вариант\n// // const getUserNames = users.map(user => user.name);\n// // console.log(getUserNames);\n// // (7) ['Moore Hensley', 'Sharlene Bush', 'Ross Vazquez', 'Elma Head', 'Carey Barr', 'Blackburn Dotson', 'Sheree Anthony']\n\n// // мой вариант\n// // const getUserNames = users.flatMap(user => user.name);\n// // console.log(getUserNames);\n// // (7) ['Moore Hensley', 'Sharlene Bush', 'Ross Vazquez', 'Elma Head', 'Carey Barr', 'Blackburn Dotson', 'Sheree Anthony']\n\n// // Решение в автопроверке\n// const getUserNames = users => users.map(user => user.name);\n\n\n// // autocheck-04-18/48\n// // Дополни функцию getUserEmails(users) так, чтобы она возвращала массив почтовых адресов пользователей (свойство email) из массива объектов в параметре users.\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     skills: [\"ipsum\", \"lorem\"],\n//     gender: \"male\",\n//     age: 37,\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     skills: [\"tempor\", \"mollit\", \"commodo\", \"veniam\", \"laborum\"],\n//     gender: \"female\",\n//     age: 34,\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     skills: [\"nulla\", \"anim\", \"proident\", \"ipsum\", \"elit\"],\n//     gender: \"male\",\n//     age: 24,\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     skills: [\"adipisicing\", \"irure\", \"velit\"],\n//     gender: \"female\",\n//     age: 21,\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     skills: [\"ex\", \"culpa\", \"nostrud\"],\n//     gender: \"male\",\n//     age: 27,\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     skills: [\"non\", \"amet\", \"ipsum\"],\n//     gender: \"male\",\n//     age: 38,\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     skills: [\"lorem\", \"veniam\", \"culpa\"],\n//     gender: \"female\",\n//     age: 39,\n//   },\n// ];\n\n// // // мой вариант\n// // const getUserEmails = users.map(user => user.email);\n// // console.log(getUserNames);                      // (7) ['moorehensley@indexia.com', 'sharlenebush@tubesys.com', 'rossvazquez@xinware.com', 'elmahead@omatom.com', 'careybarr@nurali.com', 'blackburndotson@furnigeer.com', 'shereeanthony@kog.com']\n\n// // // Решение в автопроверке\n// const getUserEmails = users => users.map(user => user.email);\n\n\n// // autocheck-04-19/48\n// // Дополни код так, чтобы в переменной evenNumbers получился массив чётных чисел из массива numbers, а в переменной oddNumbers массив нечётных. Обязательно используй метод filter().\n\n// const numbers = [17, 24, 82, 61, 36, 18, 47, 52, 73];\n\n// const evenNumbers = numbers.filter(number => number % 2 === 0);\n// const oddNumbers = numbers.filter(number => number % 2 !== 0);\n// console.log(evenNumbers);\n// console.log(oddNumbers);\n\n\n// // autocheck-04-20/48\n// // Дополни код так, чтобы в переменной allGenres был массив всех жанров книг (свойство genres) из массива books, а в переменной uniqueGenres массив уникальных жанров - без повторений.\n\n// const books = [\n//   {\n//     title: \"The Last Kingdom\",\n//     author: \"Bernard Cornwell\",\n//     genres: [\"adventure\", \"history\"],\n//   },\n//   {\n//     title: \"Beside Still Waters\",\n//     author: \"Robert Sheckley\",\n//     genres: [\"fiction\", \"mysticism\"],\n//   },\n//   {\n//     title: \"Redder Than Blood\",\n//     author: \"Tanith Lee\",\n//     genres: [\"horror\", \"mysticism\", \"adventure\"],\n//   },\n// ];\n// const allGenres = books.flatMap(book => book.genres);\n// console.log(allGenres);\n// // (7) ['adventure', 'history', 'fiction', 'mysticism', 'horror', 'mysticism', 'adventure']\n// const uniqueGenres = allGenres.filter((genre, index, array) => array.indexOf(genre) === index);\n// console.log(uniqueGenres);\n// // (5) ['adventure', 'history', 'fiction', 'mysticism', 'horror']\n\n\n// // autocheck-04-21/48\n// // Используя метод filter() дополни код так, чтобы:\n// // - В переменной topRatedBooks получился массив книг рейтинг которых (свойство rating) больше либо равно значению переменной MIN_RATING.\n// // - В переменной booksByAuthor получился массив книг написанных автором с именем (свойство author) которое совпадает со значением в переменной AUTHOR.\n\n// const books = [\n//   {\n//     title: \"The Last Kingdom\",\n//     author: \"Bernard Cornwell\",\n//     rating: 8.38,\n//   },\n//   {\n//     title: \"Beside Still Waters\",\n//     author: \"Robert Sheckley\",\n//     rating: 8.51,\n//   },\n//   {\n//     title: \"The Dream of a Ridiculous Man\",\n//     author: \"Fyodor Dostoevsky\",\n//     rating: 7.75,\n//   },\n//   {\n//     title: \"Redder Than Blood\",\n//     author: \"Tanith Lee\",\n//     rating: 7.94 },\n//   {\n//     title: \"Enemy of God\",\n//     author: \"Bernard Cornwell\",\n//     rating: 8.67 },\n// ];\n\n// const MIN_RATING = 8;\n// const AUTHOR = \"Bernard Cornwell\";\n\n// const topRatedBooks = books.filter(book => book.rating >= MIN_RATING);\n// const booksByAuthor = books.filter(book => book.author === AUTHOR);\n// console.log(topRatedBooks);\n// console.log(booksByAuthor);\n\n\n// // autocheck-04-22/48\n// // Дополни функцию getUsersWithEyeColor(users, color) так, чтобы она возвращала массив пользователей у которых цвет глаз (свойство eyeColor) совпадает со значением параметра color.\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\"\n//   }\n// ];\n\n// // // массив со всеми значениями eyeColor\n// // const getEyeColor = users.flatMap(user => user.eyeColor);\n// // console.log(getEyeColor);\n\n// // // мой вариант - выведет объект с массивами, где eyeColor: 'brown'\n// const getUsersWithEyeColor = (users, color) => users.filter(user => user.eyeColor === color).map(user => ({ eyeColor: user.eyeColor }));\n// console.log(getUsersWithEyeColor(users, 'brown'));\n// // (2) [{…}, {…}]\n// // 0: { eyeColor: 'brown' }\n// // 1: { eyeColor: 'brown' }\n// // length: 2\n// // [[Prototype]]: Array(0)\n\n// // мой вариант - выведет массив name, где есть eyeColor: 'brown'\n// const getUsersWithEyeColor = (users, color) => users.filter(user => user.eyeColor === color).map(user => user.name);\n// console.log(getUsersWithEyeColor(users, 'brown'));\n\n// // решение в автопроверке - выведет объект с массивами, со всеми ключами-значениями, где у кого-то есть совпадение по 'brown'\n// const getUsersWithEyeColor = (users, color) => users.filter(user => user.eyeColor === color);\n// console.log(getUsersWithEyeColor(users, 'brown'));\n// // (2) [{…}, {…}]\n// // 0: {name: 'Blackburn Dotson', email: 'blackburndotson@furnigeer.com', eyeColor: 'brown', friends: Array(2), isActive: false, …}\n// // 1: {name: 'Sheree Anthony', email: 'shereeanthony@kog.com', eyeColor: 'brown', friends: Array(2), isActive: true, …}\n// // length: 2\n// // [[Prototype]]: Array(0)\n\n\n// // autocheck-04-23/48\n// // Дополни функцию getUsersWithAge(users, minAge, maxAge) так, чтобы она возвращала массив пользователей, возраст которых (свойство age) попадает в промежуток от minAge до maxAge.\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\",\n//     age: 37\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\",\n//     age: 34\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\",\n//     age: 24\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\",\n//     age: 21\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\",\n//     age: 27\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\",\n//     age: 38\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\",\n//     age: 39\n//   }\n// ]\n\n// // Мой вариант решения, нужно объявить переменные minAge и maxAge\n// // const minAge = 20;\n// // const maxAge = 30;\n// // const getUsersWithAge = users.filter(\n// //     ({age}) => age >= minAge && age < maxAge\n// // );\n// // console.log(getUsersWithAge);\n\n// // Решение в автопроверке\n// const getUsersWithAge = (users, minAge, maxAge) => users.filter(\n//     ({age}) => age >= minAge && age < maxAge\n// );\n\n\n// // autocheck-04-24/48\n// // Дополни функцию getUsersWithFriend(users, friendName) так, чтобы она возвращала массив пользователей у которых есть друг с именем в параметре friendName. Массив друзей пользователя хранится в свойстве friends.\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\",\n//     age: 37\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\",\n//     age: 34\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\",\n//     age: 24\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\",\n//     age: 21\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\",\n//     age: 27\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\",\n//     age: 38\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\",\n//     age: 39\n//   }\n// ];\n\n// // // Мой вариант решения с методом includes, выведет те массивы, в которых есть совпадения\n// const getUsersWithFriend = (users, friendName) => users.filter(({friends}) => friends.includes(friendName));\n\n// // // Еще вариант решения, выведет массив из name, в которых было совпадение\n// // const getUsersWithFriend = (users, friendName) => {\n// //     return users.filter(\n// //         user => user.friends.indexOf(friendName) !== -1\n// //     ).map(user => user.name);\n// // };\n\n// console.log(getUsersWithFriend(users, \"Briana Decker\"));\n// console.log(getUsersWithFriend(users, \"Goldie Gentry\"));\n// console.log(getUsersWithFriend(users, \"Adrian Cross\"));\n\n\n// // autocheck-04-25/48\n// // Дополни функцию getFriends(users) так, чтобы она возвращала массив друзей всех пользователей (свойство friends). У нескольких пользователей могут быть одинаковые друзья, сделай так чтобы возвращаемый массив не содержал повторений.\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\",\n//     age: 37\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\",\n//     age: 34\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\",\n//     age: 24\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\",\n//     age: 21\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\",\n//     age: 27\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\",\n//     age: 38\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\",\n//     age: 39\n//   }\n// ];\n\n// // Мой вариант, разбит на 2 этапа:\n// const allFriends = users.flatMap(user => user.friends);\n// const getFriends = allFriends.filter((friend, index, array) => array.indexOf(friend) === index);\n// Мой вариант, в одну строку\n// const getFriends = users.flatMap(user => user.friends).filter((friend, index, array) => array.indexOf(friend) === index);\n// console.log(getFriends);\n\n// // Решение в автопроверке\n// const getFriends = (users) => users.flatMap(user => user.friends).filter((friend, index, array) => array.indexOf(friend) === index);\n// console.log(getFriends(users));\n\n// // 3 вариант: forOf+forOf+if\n// function getFriends(users) {\n//   // Результирующий массив\n//   let a = [];\n//   // Перебираем пользователей\n//   for(let user of users) {\n//     // Перебираем друзей пользователя user\n//     for( let name of user.friends) {\n//       // Ищем друга в массиве a\n//       let index = a.findIndex( v => v === name );\n//       // Если не нашли, то index === -1\n//       if (index === -1) {\n//         // Добавляем нового друга в массив\n//         a.push(name);\n//       }\n//     }\n//   }\n//   return a;\n// }\n\n// // 4 вариант: forEach+includes\n// function getFriends(users) {\n//   let a = [];\n//   users.forEach( u => u.friends.forEach( f => { if (!a.includes(f)) a.push(f); }) );\n//   return a;\n// }\n\n// // 5 вариант: Set+forOf\n// function getFriends(users) {\n//   let s = new Set();\n//   for(let u of users) {\n//     // Пытаемся всех друзей очередного пользователя добавить в набор\n//     // повторяющиеся будут проигнорированы\n//     s = new Set([...s, ...u.friends]);\n//   }\n//   // Преобразуем набор в массив\n//   return Array.from(s);\n// }\n\n// console.log(getFriends(users));\n\n// // 6 вариант: .reduce()+if\n// function getFriends(arr) {\n//   return arr.reduce((acc, item) => {\n//     item.friends.forEach(friend => {\n//       if (!acc.includes(friend)) acc.push(friend);\n//     })\n//     return acc;\n//   }, []);\n// }\n\n// console.log(getFriends(users))\n\n// // 7 вариант: Set+map+flat\n// function getFriends(users) {\n//   return [...new Set(users.map(user => user.friends).flat())]\n// }\n// console.log(getFriends(users));\n\n// // 8 вариант: forEach+filter+indexOf\n// function getFriends(arr) {\n//   let b =[];\n//     //Собираем все friends в один array.\n//   arr.forEach((element)=>{\n//     b = [...b, ...element.friends];\n//   });\n//   //Производим удаление одинаковых элементов.\n//   let newArray = b.filter((item, pos) => b.indexOf(item) === pos);\n//   return newArray;\n// }\n// console.log(getFriends(users));\n\n\n// // autocheck-04-26/48\n// // autocheck-04-27/48\n// // Дополни функцию getActiveUsers(users) так, чтобы она возвращала массив активных пользователей, значение свойства isActive которых true.\n// // Дополни функцию getInactiveUsers(users) так, чтобы она возвращала массив неактивных пользователей, значение свойства isActive которых false.\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\",\n//     age: 37\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\",\n//     age: 34\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\",\n//     age: 24\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\",\n//     age: 21\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\",\n//     age: 27\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\",\n//     age: 38\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\",\n//     age: 39\n//   }\n// ];\n\n// // мой вариант\n// const getActiveUsers = (users, isActive) => users.filter(user => String(user.isActive) === 'true');\n// console.log(getActiveUsers(users));\n// const getInactiveUsers = (users, isActive) => users.filter(user => String(user.isActive) === 'false');\n// console.log(getInactiveUsers(users));\n\n// // вариант с инверсией, т.к. булевые значения\n// const getActiveUsers = (users) => users.filter(user => user.isActive);\n// const getInactiveUsers = (users) => users.filter(user => !user.isActive);\n// console.log(getActiveUsers(users));\n// console.log(getInactiveUsers(users));\n\n\n// // autocheck-04-28/48\n// // Используя метод find() дополни код так, чтобы:\n// // - В переменной bookWithTitle получился объект книги название которой (свойство title) совпадает со значением переменной BOOK_TITLE.\n// // - В переменной bookByAuthor получился объект книги автор который (свойство author) совпадает со значением переменной AUTHOR.\n\n// const books = [\n//   {\n//     title: 'The Last Kingdom',\n//     author: 'Bernard Cornwell',\n//     rating: 8.38,\n//   },\n//   {\n//     title: 'Beside Still Waters',\n//     author: 'Robert Sheckley',\n//     rating: 8.51,\n//   },\n//   {\n//     title: 'The Dream of a Ridiculous Man',\n//     author: 'Fyodor Dostoevsky',\n//     rating: 7.75,\n//   },\n//     {\n//     title: 'Redder Than Blood',\n//     author: 'Tanith Lee',\n//     rating: 7.94\n//     },\n// ];\n// const BOOK_TITLE = 'The Dream of a Ridiculous Man';\n// const AUTHOR = 'Robert Sheckley';\n\n// // Мой вариант\n// const bookWithTitle = (books) => books.find((book) => book.title === BOOK_TITLE);\n// const bookByAuthor = (books) => books.find((book) => book.author === AUTHOR);\n// console.log(bookWithTitle(books));\n// console.log(bookByAuthor(books));\n\n// // Решение в автопроверке\n// const bookWithTitle = books.find((book) => book.title === BOOK_TITLE);\n// const bookByAuthor = books.find((book) => book.author === AUTHOR);\n\n\n// // autocheck-04-29/48\n// // Дополни функцию getUserWithEmail(users, email) так, чтобы она возвращала объект пользователя, почта которого (свойство email) совпадает со значением параметра email.\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\"\n//   }\n// ]\n\n// const getUserWithEmail = (users, email) => users.find((user) => user.email === email);\n// console.log(getUserWithEmail(users, \"shereeanthony@kog.com\"));\n// console.log(getUserWithEmail(users, \"elmahead@omatom.com\"));\n// console.log(getUserWithEmail(users, \"blackburndotson@furnigeer.com\"));\n// console.log(getUserWithEmail(users, \"  \"));\n\n\n// // autocheck-04-30/48\n// // Используя метод every() дополни код так, чтобы:\n// // - В переменной eachElementInFirstIsEven был результат проверки всех элементов массива firstArray на чётность.\n// // - В переменной eachElementInFirstIsOdd был результат проверки всех элементов массива firstArray на нечётность.\n// // - В переменной eachElementInSecondIsEven был результат проверки всех элементов массива secondArray на чётность.\n// // - В переменной eachElementInSecondIsOdd был результат проверки всех элементов массива secondArray на нечётность.\n// // - В переменной eachElementInThirdIsEven был результат проверки всех элементов массива thirdArray на чётность.\n// // - В переменной eachElementInThirdIsOdd был результат проверки всех элементов массива thirdArray на нечётность.\n\n// const firstArray = [26, 94, 36, 18];\n// const secondArray = [17, 61, 23];\n// const thirdArray = [17, 26, 94, 61, 36, 23, 18];\n\n// const eachElementInFirstIsEven = firstArray.every(value => value % 2 === 0);\n// const eachElementInFirstIsOdd = firstArray.every(value => value % 2 !== 0);\n\n// const eachElementInSecondIsEven = secondArray.every(value => value % 2 === 0);\n// const eachElementInSecondIsOdd = secondArray.every(value => value % 2 !== 0);\n\n// const eachElementInThirdIsEven = thirdArray.every(value => value % 2 === 0);\n// const eachElementInThirdIsOdd = thirdArray.every(value => value % 2 !== 0);\n\n// console.log(eachElementInFirstIsEven);          // true\n// console.log(eachElementInFirstIsOdd);           // false\n// console.log(eachElementInSecondIsEven);         // true\n// console.log(eachElementInSecondIsOdd);          // false\n// console.log(eachElementInThirdIsEven);          // true\n// console.log(eachElementInThirdIsOdd);           // false\n\n\n// // autocheck-04-31/48\n// // Дополни функцию isEveryUserActive(users) так, чтобы она проверяла все ли пользователи сейчас активны (свойство isActive) и возвращала true или false.\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\"\n//   }\n// ];\n\n// const isEveryUserActive = (users) => users.every(user => user.isActive);\n// // вернет false, т.к. не все элементы массива имеют true\n// console.log(isEveryUserActive(users));\n\n\n// // autocheck-04-32/48\n// // Используя метод some() дополни код так, чтобы:\n// // - В переменной anyElementInFirstIsEven был результат проверки наличия чётных элементов в массиве firstArray.\n// // - В переменной anyElementInFirstIsOdd был результат проверки наличия нечётных элементов в массиве firstArray.\n// // - В переменной anyElementInSecondIsEven был результат проверки наличия чётных элементов в массиве secondArray.\n// // - В переменной anyElementInSecondIsOdd был результат проверки наличия нечётных элементов в массиве secondArray.\n// // - В переменной anyElementInThirdIsEven был результат проверки наличия чётных элементов в массиве thirdArray.\n// // - В переменной anyElementInThirdIsOdd был результат проверки наличия нечётных элементов в массиве thirdArray.\n\n// const firstArray = [26, 94, 36, 18];\n// const secondArray = [17, 61, 23];\n// const thirdArray = [17, 26, 94, 61, 36, 23, 18];\n\n// const anyElementInFirstIsEven = firstArray.some(value => value % 2 === 0);\n// const anyElementInFirstIsOdd = firstArray.some(value => value % 2 !== 0);\n\n// const anyElementInSecondIsEven = secondArray.some(value => value % 2 === 0);\n// const anyElementInSecondIsOdd = secondArray.some(value => value % 2 !== 0);\n\n// const anyElementInThirdIsEven = thirdArray.some(value => value % 2 === 0);\n// const anyElementInThirdIsOdd = thirdArray.some(value => value % 2 !== 0);\n\n// // вернет false или true в зависимости от проверки\n// console.log(anyElementInFirstIsEven);          // true\n// console.log(anyElementInFirstIsOdd);           // false\n// console.log(anyElementInSecondIsEven);         // false\n// console.log(anyElementInSecondIsOdd);          // true\n// console.log(anyElementInThirdIsEven);          // true\n// console.log(anyElementInThirdIsOdd);           // true\n\n\n// // autocheck-04-33/48\n// // Дополни функцию isAnyUserActive(users) так, чтобы она проверяла наличие активных пользователей (свойство isActive) и возвращала true или false.\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\"\n//   }\n// ];\n\n// // const isAnyUserActive = users => {\n// //     const result = users.some(user => {\n// //         if (user.isActive) {\n// //             return user\n// //         };\n// //     });\n// //     return result;\n// // };\n\n// const isAnyUserActive = users => users.some(({isActive}) => isActive);\n// // вернет true, т.к. хоть один элемент массива имеет true\n// console.log(isAnyUserActive(users));\n\n\n// // autocheck-04-34/48\n// // Игровому сервису необходим функционал подсчёта среднего времени проведённого в играх. Дополни код так, чтобы в переменной totalPlayTime получилось общее игровое время из массива playtimes.\n\n// const players = {\n//     mango: 1270,\n//     poly: 468,\n//     ajax: 710,\n//     kiwi: 244\n// };\n// // закоментировано, чтобы вывести значения в консоль\n// // const playtimes = Object.values(players); // [1270, 468, 710, 244]\n// const playtimes = [1270, 468, 710, 244];\n\n// const totalPlayTime = playtimes.reduce((previosValue, number) => {return previosValue + number}, 0);\n\n// const averagePlayTime = totalPlayTime / playtimes.length;\n// console.log(playtimes);\n// console.log(totalPlayTime);             // 2692\n// console.log(averagePlayTime);           // 673\n\n\n// // autocheck-04-35/48\n// // Нашему сервису необходимо рассчитать среднее время проведённое в одной игре для каждого игрока, и получить общую сумму этих времён. Рассчитать время для каждого из игроков, можно разделив его время (свойство playtime) на количество игр (свойство gamesPlayed).\n\n// const players = [\n//     { name: \"Mango\", playtime: 1270, gamesPlayed: 4 },\n//     { name: \"Poly\", playtime: 469, gamesPlayed: 2 },\n//     { name: \"Ajax\", playtime: 690, gamesPlayed: 3 },\n//     { name: \"Kiwi\", playtime: 241, gamesPlayed: 1 },\n// ];\n\n// const totalAveragePlaytimePerGame = players.reduce((total, player) => {\n//     return total + (player.playtime / player.gamesPlayed)\n// }, 0);\n// console.log(totalAveragePlaytimePerGame);        // 1043\n\n\n// // autocheck-04-36/48\n// // Дополни функцию calculateTotalBalance(users) так, чтобы она считала и возвращала сумму всех средств (свойство balance) которые хранят пользователи из массива users.\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\"\n//   }\n// ];\n\n// const calculateTotalBalance = users.reduce((total, user) => {\n//     return total + user.balance\n// }, 0);\n\n// const calculateTotalBalance = users => users.reduce((total, user) => ( total + user.balance), 0);\n\n// // выведет обший баланс\n// console.log(calculateTotalBalance(users));\n\n\n// // autocheck-04-37/48\n// // Дополни функцию getTotalFriendCount(users) так, чтобы она считала и возвращала общее количество друзей (свойство friends) всех пользователей из массива users.\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\"\n//   }\n// ];\n\n// const getTotalFriendCount = users => users.reduce((total, user) => (user.friends.length += total), 0);\n// // выведет общее количество друзей\n// console.log(getTotalFriendCount(users));\n\n\n// // autocheck-04-38/48\n// // Дополни код так, чтобы в переменной ascendingReleaseDates получилась отсортированная по возрастанию копия массива releaseDates, а в переменной alphabeticalAuthors копия массива имён авторов authors отсортированная в по алфавиту.\n\n// const releaseDates = [2016, 1967, 2008, 1984, 1973, 2012, 1997];\n// const authors = [\n//     \"Tanith Lee\",\n//     \"Bernard Cornwell\",\n//     \"Robert Sheckley\",\n//     \"Fyodor Dostoevsky\",\n// ];\n\n// // при применении распыления исходный массив не изменяется, см. разницу в releaseDates и ascendingReleaseDates\n\n// const ascendingReleaseDates = [...releaseDates].sort();\n// console.log(releaseDates);\n// console.log(ascendingReleaseDates);\n\n// const alphabeticalAuthors = [...authors].sort();\n// console.log(authors);\n// console.log(alphabeticalAuthors);\n\n\n// // autocheck-04-39/48\n// // Онлайн бибилиотеке необходимо отображать книги сортированные по дате издания, по её возрастанию или убыванию. Дополни код так, чтобы в переменной ascendingReleaseDates получилась отсортированная по возрастанию копия массива releaseDates, а в переменной descendingReleaseDates копия отсортированная по убыванию.\n\n// const releaseDates = [2016, 1967, 2008, 1984, 1973, 2012, 1997];\n\n// const ascendingReleaseDates = [...releaseDates].sort((a, b) => a - b);\n// const descendingReleaseDates = [...releaseDates].sort((a, b) => b - a);\n\n// console.log(ascendingReleaseDates);\n// console.log(descendingReleaseDates);\n\n\n// // autocheck-04-40/48\n// // Онлайн бибилиотеке необходимо отображать книги отсортированные по автору, в алфавитном и обратном алфавитном порядке. Дополни код так, чтобы в переменной authorsInAlphabetOrder получилась отсортированная по алфавиту копия массива authors, а в переменной authorsInReversedOrder копия отсортированная в обратном алфавитном порядке.\n\n// const authors = [\n//     \"Tanith Lee\",\n//     \"Bernard Cornwell\",\n//     \"Robert Sheckley\",\n//     \"Fyodor Dostoevsky\",\n// ];\n\n// const authorsInAlphabetOrder = [...authors].sort((a, b) => a.localeCompare(b));\n// const authorsInReversedOrder = [...authors].sort((a, b) => b.localeCompare(a));\n// console.table(authorsInAlphabetOrder);\n// console.table(authorsInReversedOrder);\n\n\n// // autocheck-04-41/48\n// // Дополни код так, чтобы:\n// // - В переменной sortedByAuthorName получился массив книг отсортированный по имени автора в алфавитном порядке.\n// // - В переменной sortedByReversedAuthorName получился массив книг отсортированный по имени автора в обратном алфавитном порядке.\n// // - В переменной sortedByAscendingRating получился массив книг отсортированный по возрастанию рейтинга.\n// // - В переменной sortedByDescentingRating получился массив книг отсортированный по убыванию рейтинга.\n\n// const books = [\n//   {\n//     title: \"The Last Kingdom\",\n//     author: \"Bernard Cornwell\",\n//     rating: 8.38,\n//   },\n//   {\n//     title: \"Beside Still Waters\",\n//     author: \"Robert Sheckley\",\n//     rating: 8.51,\n//   },\n//   {\n//     title: \"The Dream of a Ridiculous Man\",\n//     author: \"Fyodor Dostoevsky\",\n//     rating: 7.75,\n//   },\n//   {\n//     title: \"Redder Than Blood\",\n//     author: \"Tanith Lee\",\n//     rating: 7.94\n//     },\n//   {\n//     title: \"Enemy of God\",\n//     author: \"Bernard Cornwell\",\n//     rating: 8.67\n//     },\n// ];\n\n// const sortedByAuthorName = [...books].sort((firstBook, secondBook) => firstBook.author.localeCompare(secondBook.author));\n\n// const sortedByReversedAuthorName = [...books].sort((firstBook, secondBook) => secondBook.author.localeCompare(firstBook.author));\n\n// const sortedByAscendingRating = [...books].sort((firstBook, secondBook) => firstBook.rating - secondBook.rating);\n\n// const sortedByDescentingRating = [...books].sort((firstBook, secondBook) => secondBook.rating - firstBook.rating);\n\n// console.table(sortedByAuthorName);\n// console.table(sortedByReversedAuthorName);\n// console.table(sortedByAscendingRating);\n// console.table(sortedByDescentingRating);\n\n\n// // autocheck-04-42/48\n// // Дополни функцию sortByAscendingBalance(users) так, чтобы она возвращала массив пользователей отсортированный по возрастанию их баланса (свойство balance).\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\"\n//   }\n// ];\n\n// const sortByAscendingBalance = [...users].sort((firstUser, secondUser) => firstUser.balance - secondUser.balance);\n// console.table(sortByAscendingBalance);\n\n\n// // autocheck-04-43/48\n// // Дополни функцию sortByDescendingFriendCount(users) так, чтобы она возвращала массив пользователей отсортированный по убыванию количества их друзей (свойство friends).\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\"\n//   }\n// ];\n\n// const sortByDescendingFriendCount = [...users].sort((firstUser, secondUser) => secondUser.friends.length - firstUser.friends.length);\n// console.table(sortByDescendingFriendCount);\n\n\n// // autocheck-04-44/48\n// // Дополни функцию sortByName(users) так, чтобы она возвращала массив пользователей отсортированный по их имени (свойство name) в алфавитном порядке.\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\"\n//   }\n// ];\n\n// const sortByName = [...users].sort((firstUser, secondUser) => firstUser.name.localeCompare(secondUser.name));\n// console.table(sortByName);\n\n\n// // autocheck-04-45/48\n// // Дополни код так, чтобы в переменной names получился массив имён авторов в алфавитном порядке, рейтинг книг которых больше значения переменной MIN_BOOK_RATING.\n\n// const books = [\n//   {\n//     title: \"The Last Kingdom\",\n//     author: \"Bernard Cornwell\",\n//     rating: 8.38,\n//   },\n//   {\n//     title: \"Beside Still Waters\",\n//     author: \"Robert Sheckley\",\n//     rating: 8.51,\n//   },\n//   {\n//     title: \"The Dream of a Ridiculous Man\",\n//     author: \"Fyodor Dostoevsky\",\n//     rating: 7.75,\n//   },\n//   {\n//     title: \"Redder Than Blood\",\n//     author: \"Tanith Lee\",\n//     rating: 7.94\n//   },\n//   {\n//     title: \"The Dreams in the Witch House\",\n//     author: \"Howard Lovecraft\",\n//     rating: 8.67,\n//   },\n// ];\n\n// const MIN_BOOK_RATING = 8;\n\n// const names = [...books]\n//     .filter(book => book.rating > MIN_BOOK_RATING)\n//     .map(book => book.author)\n//     .sort((firstAuthor, secondAuthor) => firstAuthor.localeCompare(secondAuthor));\n\n// console.table(names);\n\n\n// // autocheck-04-46/48\n// // Дополни функцию getNamesSortedByFriendCount(users) так, чтобы она возвращала массив имён пользователей отсортированный по возрастанию количества их друзей (свойство friends).\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\"\n//   }\n// ];\n\n// const getNamesSortedByFriendCount = [...users]\n//     .sort((firstUser, secondUser) => firstUser.friends.length - secondUser.friends.length)\n//     .map(user => user.name)\n//     ;\n// console.table(getNamesSortedByFriendCount);\n\n\n// // autocheck-04-47/48\n// // Дополни функцию getSortedFriends(users) так, чтобы она возвращала массив уникальных имён друзей (свойство friends) отсортированный по алфавиту .\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\"\n//   }\n// ];\n\n// const getSortedFriends = [...users]\n//     .flatMap(user => user.friends)\n//     .filter((friend, index, array) => array.indexOf(friend) === index)\n//     .sort((firstFriend, secondFriend) => firstFriend.localeCompare(secondFriend)\n//     );\n// console.table(getSortedFriends);\n\n\n// // autocheck-04-48/48\n// // Дополни функцию getTotalBalanceByGender(users, gender) так, чтобы она возвращала общий баланс пользователей (свойство balance), пол которых (свойство gender) совпадает со значением параметра gender.\n\n// const users = [\n//   {\n//     name: \"Moore Hensley\",\n//     email: \"moorehensley@indexia.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Sharron Pace\"],\n//     isActive: false,\n//     balance: 2811,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sharlene Bush\",\n//     email: \"sharlenebush@tubesys.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Briana Decker\", \"Sharron Pace\"],\n//     isActive: true,\n//     balance: 3821,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Ross Vazquez\",\n//     email: \"rossvazquez@xinware.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Marilyn Mcintosh\", \"Padilla Garrison\", \"Naomi Buckner\"],\n//     isActive: false,\n//     balance: 3793,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Elma Head\",\n//     email: \"elmahead@omatom.com\",\n//     eyeColor: \"green\",\n//     friends: [\"Goldie Gentry\", \"Aisha Tran\"],\n//     isActive: true,\n//     balance: 2278,\n//     gender: \"female\"\n//   },\n//   {\n//     name: \"Carey Barr\",\n//     email: \"careybarr@nurali.com\",\n//     eyeColor: \"blue\",\n//     friends: [\"Jordan Sampson\", \"Eddie Strong\"],\n//     isActive: true,\n//     balance: 3951,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Blackburn Dotson\",\n//     email: \"blackburndotson@furnigeer.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Jacklyn Lucas\", \"Linda Chapman\"],\n//     isActive: false,\n//     balance: 1498,\n//     gender: \"male\"\n//   },\n//   {\n//     name: \"Sheree Anthony\",\n//     email: \"shereeanthony@kog.com\",\n//     eyeColor: \"brown\",\n//     friends: [\"Goldie Gentry\", \"Briana Decker\"],\n//     isActive: true,\n//     balance: 2764,\n//     gender: \"female\"\n//   }\n// ];\n\n// // вариант с if\n// const getTotalBalanceByGender = (users, gender) => {\n//   return users.reduce((totalBalance, usr) => {\n//     if (usr.gender != gender) return totalBalance;\n//     return totalBalance + usr.balance;\n//   }, 0);\n// };\n\n// // рефакторинг\n// const getTotalBalanceByGender = (users, gender) => users.reduce((totalBalance, user) => totalBalance + user.balance * (user.gender == gender), 0);\n\n// // решение в автопроверке\n// const getTotalBalanceByGender = (users, gender) => {\n//     return [...users]\n//         .filter(user => user.gender === gender)\n//         .reduce((totalBalance, user) => { return totalBalance += user.balance }, 0)\n// };\n\n// console.log(getTotalBalanceByGender(users, \"male\"));\n// console.log(getTotalBalanceByGender(users, \"female\"));\n"],"names":[],"version":3,"file":"index.e48ee28b.js.map"}