{"mappings":"AAgEA,MAAMA,EAAOC,SAASC,cAAc,UAEpCC,iBACQ,MAAMC,QAAaC,MAAM,mCACzB,IAAKD,EAAKE,GACN,MAAM,IAAIC,MAAM,gBAGpB,aADmBH,EAAKI,M,EAGhCC,GACCC,MAAKC,IACFC,QAAQC,IAAIF,GACZX,EAAKc,mBAAmB,YAAa,iBAC/BH,EAAKI,sBACLJ,EAAKK,yBACJ,IAEVC,OAAMC,GAAON,QAAQC,IAAIK","sources":["src/js/goit-test-11-022.js"],"sourcesContent":["\"use strict\";\n\n\n// <!-- Лекция 26.11.2022 -->\n\n// 1. Примеры асинхронных функций\n\n// async function foo(){\n//     return 'hello'\n// };\n// // console.log(foo);           // async ƒ foo() {}\n// // console.log(foo());         // Promise {<fulfilled>: hello}   \n// foo()\n// .then(data => console.log('data', data))    // hello - все ответы от асинхронной функции придут в then\n// .catch(err => console.log('err', err));\n\n// 2. Примеры асинхронных функций\n\n// async function foo(){\n//     const notAwait = fetch('https://swapi.dev/api/people/1/');\n//     // первый ответ\n//     console.log('notAwait', notAwait);      // notAwait Promise {<pending>}\n//     // третий ответ\n//     const withAwait = await fetch('https://swapi.dev/api/people/1/');\n//     console.log('withAwait', withAwait);    // withAwait Response {type: 'cors', url: 'https://swapi.dev/api/people/1/', redirected: false, status: 200, ok: true, …}\n\n//     // const data = await resp.json();\n//     // console.log(data);              // {name: 'Luke Skywalker', height: '172', mass: '77', hair_color: 'blond', skin_color: 'fair', …}\n\n//     return 'hello';\n// };\n// // второй ответ(серия)\n// console.log('foo()', foo());        // Promise {<pending>}\n// for (let i = 0; i < 20; i+=1) {\n//     console.log('value', i);    \n// }\n\n// 3. Пример асинхронной функции, если данные обрабатываются внутри функции\n\n// const list = document.querySelector('.list');\n\n// async function foo() {\n//     try {\n//         const resp = await fetch('https://swapi.dev/api/people/1/'); //\n//         if (!resp.ok) {\n//             throw new Error('RESP NOT OK!')\n//         }\n//         const data = await resp.json();\n\n//         list.insertAdjacentHTML('beforeend', `<li>\n//         <h1>${data.name}</h1>\n//         <h2>${data.gender}</h2>\n//         </li>`);\n\n//         console.log(data);\n//     } catch (err) {\n//         console.log(err);\n//     }\n// }\n// foo();\n\n\n// 4. Пример асинхронной функции, если данные нужно передать из функции наружу\n\nconst list = document.querySelector('.list');\n\nasync function foo() {\n        const resp = await fetch('https://swapi.dev/api/people/1/'); //\n        if (!resp.ok) {\n            throw new Error('RESP NOT OK!')\n        }\n        const data = await resp.json();\n        return data;\n}\nfoo()\n.then(data => {\n    console.log(data);\n    list.insertAdjacentHTML('beforeend', `<li>\n    <h1>${data.name}</h1>\n    <h2>${data.gender}</h2>\n    </li>`);\n})\n.catch(err => console.log(err));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["$72529ddf28a28acb$var$list","document","querySelector","async","resp","fetch","ok","Error","json","$72529ddf28a28acb$var$foo","then","data","console","log","insertAdjacentHTML","name","gender","catch","err"],"version":3,"file":"goit-test-11-022.a8700fbc.js.map"}