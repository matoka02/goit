{"mappings":"AAAA","sources":["src/js/goit-test-02-004.js"],"sourcesContent":["\"use strict\"\n\n\n// // Arguments - переменная, которая создаст псевдо-массив\n// function foo() {\n//     console.log(arguments);\n// }\n// foo(5, \"Mango\", true);\n\n\n// // Области видимости\n// let a = 10;\n\n// if (true) {\n//     let a = 5;                      //если не объявить, а=10\n//     console.log('in local', a);     //локальная область видимости, находится в {}\n// }\n\n// console.log('in global', a);        //глобальная область видимости\n\n\n// const a = 10;\n\n// if (true) {\n//     let a = 5;\n//     a = 20;\n//     // console.log(a);\n// }\n\n// console.log(a);                     //10\n\n\n// let a = 10;\n\n// if (true) {\n//     let a = 100;\n//     a = 1;\n//     if (true) {\n//         a = 15;\n//         // let a = 25;\n//         console.log('local 2:', a);         //15\n//     }\n//     console.log('local:', a);               //15\n// }\n\n// console.log('local 1:', a);                 //10\n\n\n// const numbers = [1, 2, 3, 4, 5, 6, 7];\n// let total = 0;\n\n// for (const number of numbers) {\n//     total += number;\n// }\n\n// console.log(total);                             //28\n\n\n// // Function expression\n// // Вызывается только после объявления\n\n// const world = 'world';\n// const hello = 'Hello';\n// // foo(world, hello);                             // это ошибка!\n// const foo = function(hello, world) {\n//     console.log(hello, world);\n// }\n// foo(world, hello);\n\n\n// // Function declaretion\n\n// const world = 'world';\n// const hello = 'Hello';\n// boo(hello, world);                                  // не ошибка\n// function boo(hello, world) {\n//     console.log(hello, world);\n// }\n// boo(hello, world);                                  // так тоже можно\n\n\n// // Arguments\n// // Посчитать сумму всех чисел\n\n// function getSum() {\n//     console.log(arguments);\n//     // for (const argument of arguments) {\n//     //     const element = array[index];\n//     //     console.log(argument);\n//     // }\n//     const arr = Array.from(arguments);          //превращение псевдо-массива в массив, не обязательно\n//     const arr2 = [...arguments];                //превращение псевдо-массива в массив, не обязательно\n//     console.log(arr);\n//     let total = 0;\n//     for (let i = 0; i < arguments.length; i+=1) {\n//         // console.log(arguments[i]);\n//         total += arguments[i];\n//     }\n//     return total;\n// }\n\n// console.log(getSum(1, 2, 3, 4, 5, 6, 7, 8));\n// console.log(getSum(44, 5, 14, 3));\n\n\n// // Стек вызовов\n\n// function foo() {\n//     console.log('start foo');\n// };\n\n// function boo() {\n//     console.log('start boo');\n//     foo();\n//     console.log('end boo');\n// };\n// boo();\n\n\n// // Проверка наличия в массиве\n\n// const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'Node'];\n\n// function addCourses(name) {\n//     if (!courses.includes(name)) {\n//         courses.push(name);\n//         return;\n//     }\n//     return 'У вас уже есть данный курс';\n// }\n// addCourses('Express');\n// console.log(courses);\n// const result = addCourses('CSS');\n// console.log('result:', result);\n\n\n// // Удалить из массива\n\n// const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'Node'];\n\n// function removeCourse(name) {\n//     if (courses.includes(name)) {\n//         const idx = courses.indexOf(name);\n//         courses.splice(idx, 1);\n//         return `Курс ${name} успешно удален`;\n//     }\n//     return `Курс с таким названием не найден`;\n// }\n// console.log(removeCourse('React'));\n// console.log(courses);\n// console.log(removeCourse('Vue'));\n\n\n// // Обновление курса\n\n// const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'Node', 'Express'];\n\n// function updateCourse(oldName, newName) {\n//     console.time('foo');                      // функция подсчета времени обработки в браузере\n//     if (courses.includes(oldName)) {\n//         const idx = courses.indexOf(oldName);\n//         // courses.splice(idx, 1, newName);   //замена .splice, дольше отрабатывает\n//         courses[idx] = newName;               //замена по индексу\n//         return`Курс ${oldName} заменен на ${newName}`;\n//     }\n//     console.timeEnd('foo');                   // функция подсчета времени обработки в браузере\n//     return `Курс с таким названием не найден`;\n// }\n\n// console.log(courses);\n// console.log(updateCourse('Express', 'NestJS'));\n// console.log(updateCourse('Angular', 'NestJS'));\n\n// // VAR\n\n// Объявление переменной автоматически выносится вверх, в начало файла, а фактическое место написания - всего лишь место присвоения значения\n\n// console.log(a);                     //undefined\n// var a = 10;\n\n// console.log(b);                     //Uncaught ReferenceError: Cannot access 'b' before initialization\n// let b = 5;\n\n// Можно несколько раз присваивать значение, в расчетах примет участие только последнее значение\n\n// var a = 10;\n// var a = 4;\n// var a = 2.5;\n// console.log(a);                         //2.5\n\n// let b = 10;\n// let b = 4;                              //Cannot redeclare block-scoped variable 'b'.\n\n// Игнорирует локальную область видимости. Не находится, только если применена внутри функции\n\n// if (true) {\n//     var c = 10;\n// }\n// console.log(c);\n\n// function foo() {\n//     var c = 7;\n// }\n// console.log(c);"],"names":[],"version":3,"file":"index.a654a1da.js.map"}