{"mappings":"AAAA","sources":["src/js/goit-test-04-008.js"],"sourcesContent":["\"use strict\";\n\n// <!-- Лекция 28.09.2022 -->\n\n\n// // Массив cars\n\n// const cars = [\n//         {\n//     make: 'Honda',\n//     price: 24045,\n//     model: 'CR-V',\n//     type: 'suv',\n//     amount: 14,\n//     onSale: true,                            \n//     },\n//         {\n//     make: 'Honda',\n//     price: 22455,\n//     model: 'accord',\n//     type: 'sedan',\n//     amount: 2,\n//     onSale: true,                            \n//     },\n//         {\n//     make: 'Honda',\n//     price: 22455,\n//     model: 'CR-V',\n//     type: 'Accord',\n//     amount: 2,\n//     onSale: true,                            \n//     },\n//         {\n//     make: 'Mazda',\n//     price: 24195,\n//     model: 'Mazda 6',\n//     type: 'sedan',\n//     amount: 8,\n//     onSale: false,                            \n//     },\n//         {\n//     make: 'Mazda',\n//     price: 31520,\n//     model: 'CX-6',\n//     type: 'suv',\n//     amount: 7,\n//     onSale: true,                            \n//     },\n//         {\n//     make: 'Toyota',\n//     price: 34210,\n//     model: '4Ranner',\n//     type: 'suv',\n//     amount: 19,\n//     onSale: false,                            \n//     },\n//         {\n//     make: 'Toyota',\n//     price: 45560,\n//     model: 'Seguonia',\n//     type: 'suv',\n//     amount: 16,\n//     onSale: false,                            \n//     },\n//         {\n//     make: 'Toyota',\n//     price: 24320,\n//     model: 'Tacoma',\n//     type: 'track',\n//     amount: 4,\n//     onSale: true,                            \n//     },\n//         {\n//     make: 'Ford',\n//     price: 27110,\n//     model: 'F-150',\n//     type: 'suv',\n//     amount: 11,\n//     onSale: true,                            \n//     },\n//         {\n//     make: 'Ford',\n//     price: 22120,\n//     model: 'Fusion',\n//     type: 'sedan',\n//     amount: 6,\n//     onSale: true,                            \n//     },\n//         {\n//     make: 'Ford',\n//     price: 27110,\n//     model: 'Explorer',\n//     type: 'suv',\n//     amount: 6,\n//     onSale: false,                            \n//     },\n// ];\n// // массив 11 объектов\n// console.log(cars);\n\n\n// // <!-- Метод map -->\n\n// // 1. Поиск моделей\n\n// // const getModels = arr => {\n// //     const models = arr.map((item, index, array) => item.model);\n// //     return models;\n// // };\n\n// // рефакторинг\n// const getModels = arr => arr.map(({model}) => model);\n// // массив, состоящий из моделей\n// console.log(getModels(cars));\n\n// // 2. Применение скидки\n\n// const makeCarWithDiscount = (cars, discount) => {\n//     const result = cars.map((car) => {\n//         const discountPrice = car.price / 100 * discount;\n//         car.price -= discountPrice;\n//         return car;\n//     });\n//     return result;\n// };\n// массив 11 объектов, в которых цена с учетом скидки\n// console.log(makeCarWithDiscount(cars, 6));\n// console.log(makeCarWithDiscount(cars, 11));\n\n// // рефакторинг\n// const makeCarWithDiscount = (cars, discount) =>\n//     cars.map((car) => { car.price -= car.price / 100 * discount;\n//         return car;\n//     });\n// console.log(makeCarWithDiscount(cars, 6));\n// console.log(makeCarWithDiscount(cars, 11));\n\n\n// // рефакторинг с округлением\n\n// const makeCarWithDiscount = (cars, discount) =>\n//     cars.map((car) => {\n//         car.price -= car.price / 100 * discount;\n//         car.price = Math.ceil(car.price);\n//         return car;\n//     });\n// console.log(makeCarWithDiscount(cars, 6));\n// console.log(makeCarWithDiscount(cars, 11));\n\n\n// // <!-- Метод filter -->\n\n// // 3. Поиск машин по определенной цене\n\n// const filterByPrice = (cars, threshold) => {\n//     const result = cars.filter((item, idx, arr) => {\n//         if (item.price < threshold) {\n//             return item\n//         }\n//     })\n//     return result;\n// };\n\n// // рефакторинг\n// const filterByPrice = (cars, threshold) => cars.filter(({price}) => price < threshold);\n// // массив объектов, у которых цена выше заданного минимума\n// console.log(filterByPrice(cars, 30000));\n// console.log(filterByPrice(cars, 25000));\n\n// // 4. Поиск машин по наличию в продаже\n\n// const getCarsWithDiscount = cars => {\n//     const result = cars.filter(car => {\n//         if (car.onSale) {\n//             return car;\n//         }\n//     });\n//     return result;\n// };\n\n// // рефакторинг\n// const getCarsWithDiscount = cars => cars.filter(({onSale}) => onSale);\n// // массив объектов, которые есть в продаже\n// console.log(getCarsWithDiscount(cars));\n\n\n// // 5. Поиск типа машин\n\n// const getCarsWithType = (cars, type) => {\n//     const result = cars.filter((car) => {\n//         if (car.type === type) {\n//             return car;\n//         };\n//     });\n//     return result;\n// };\n\n// // рефакторинг\n// const getCarsWithType = (cars, type) => cars.filter(({type: carType}) => carType === type);\n// // массив объектов, с заданным типом\n// console.log(getCarsWithType(cars, 'suv'));\n// console.log(getCarsWithType(cars, 'sedan'));\n\n\n// // <!-- Метод find -->\n\n// // 6. Поиск определенной модели\n\n// const getCarsByModel = (cars, model) => {\n//     const result = cars.find((car) => {\n//         if (car.model === model) {\n//             return car;\n//         }\n//     })\n//     return result;\n// };\n\n// // рефакторинг\n// const getCarsByModel = (cars, model) => cars.find((car) => car.model === model);\n// // объект, в котором найдена заданная модель\n// console.log(getCarsByModel(cars, 'F-150'));\n// console.log(getCarsByModel(cars, 'CX-9'));\n\n\n// // <!-- Метод sort -->\n// // этот метод мутирует/изменяет исходный массив!\n\n// // 7. Сортировка по стоимости по возростанию\n\n// const sortByAscendingAmount = cars => {\n//     const result = cars.sort((a, b) =>\n//     // {\n//     //     // объекты\n//     //     console.log('a', a);\n//     //     console.log('b', b);\n//     // }\n//         a.amount - b.amount\n//     );\n//     return result;\n// };\n\n// // рефакторинг\n// const sortByAscendingAmount = cars => cars.sort((a, b) =>\n//         a.amount - b.amount);\n// // массив объектов отсортированный\n// console.table(sortByAscendingAmount(cars));\n\n\n// // 8. Сортировка по стоимости по убыванию\n\n// // const sortByDescendingAmount = cars => {\n// //     const result = cars.sort((a, b) =>\n// //         b.amount - a.amount\n// //     );\n// //     return result;\n// // };\n\n// // рефакторинг\n// const sortByAscendingAmount = cars => cars.sort((a, b) =>\n//         a.amount - b.amount);\n// // массив объектов отсортированный\n// console.table(sortByDescendingAmount(cars));\n\n\n// // 9. Сортировка моделей по алфавиту и наоборот\n\n// const sortByModel = (cars, order) => {\n//     let result;\n//     if (order === 'asc') {\n//         // по алфавиту\n//         result = cars.sort((a,b) => a.model.localeCompare(b.model));\n\n//     } else {\n//         // обратный алфавит\n//         result = cars.sort((a,b) => b.model.localeCompare(a.model));\n//     };\n//     return result;\n// };\n// // массив объектов изменен и отсортирован\n// console.table(sortByModel(cars, 'asc'));\n// console.table(sortByModel(cars, 'desc'));\n\n\n// // <!-- Метод reduce -->\n\n// // 10. Подсчет кол-ва автомобилей всего\n\n// const getTotalAmount = cars => {\n//     const result = cars.reduce((acc, car, idx, arr) => {\n//         return acc + car.amount\n//     }, 0)\n//     return result;\n//     // // если указать , получим р-т в виде строки\n//     // const result = cars.reduce((acc, car, idx, arr) => {\n//     //     return acc + car.amount\n//     // }, '')\n//     // return result;\n// };\n// // // число\n// console.log(getTotalAmount(cars));\n\n\n// // <!-- Цепочки методов -->\n\n// // 11. Поиск моделей машин, которые есть на распродаже\n\n// const getModelOnSale = cars => {\n//     const result = cars.filter((car) => car.onSale)\n//         .map(({ model }) => model);\n//     return result;\n// };\n// // массив моделей\n// console.log(getModelOnSale(cars));\n\n\n// // 12. Сортировка моделей машин, которые есть на распродаже\n\n// const getSortedCarsOnSale = cars => {\n//     const result = cars.filter(({ onSale }) => onSale)\n//     .sort((a,b) => a.price-b.price);\n\n//     return result.reduce((acc, car, index) => {\n//         return acc + `${index+1}. ${car.make} ${car.model} цена ${car.price};\\n`\n//     }, result.length ? `Количество авто ${result.length}:\\n` : `Извините, такой модели нет`) ;\n// };\n// console.table(getSortedCarsOnSale(cars));\n\n\n// // 13. Сколько раз встречается буква?\n\n// const str = `dfsjhgflhj'p;jon,vbvgjfcjyrdrjdgfxbd`;\n// const st1 = `sdgsgs;dfgbmfx;cLgdf;GGGydhkdslhkfdlkhghdflghlfghkFFFFF`;\n\n// // использование метода reduce\n// function foo(str) {\n//     str = str.split(``);\n//     return str.reduce((acc, value) => {\n//         if (acc.hasOwnProperty(value)) {\n//             acc[value] += 1;\n//         } else {\n//             acc[value] = 1;\n//         }\n//         return acc;\n//     }, {})\n// };\n// foo(str);\n// foo(st1);\n\n// // использование метода for...of\n\n// function foo(str) {\n//     str = str.split(``);\n//     const acc = {};\n//     for (const value of str) {\n//         if (acc.hasOwnProperty(value)) {\n//             acc[value] += 1;\n//         } else {\n//             acc[value] = 1;\n//         }\n//     };\n//     return acc;\n// };\n// foo(str);\n// foo(st1);\n\n\n// console.table(foo(str));\n// console.table(foo(st1));"],"names":[],"version":3,"file":"index.31d13e1e.js.map"}