{"mappings":"YAAA,aA8DsB,IAAhBA,EAAOC,SAASC,cAAc,SAC9BC,EAAQF,SAASC,cAAc,aAEjCE,EAAO,EAOLC,EAAW,IAAIC,sBAErB,SAAgBC,EAASC,GACrBD,EAAQE,SAAQ,SAAAC,GAERA,EAAMC,gBAGNC,EADAR,GAAQ,GACOS,MAAK,SAAAC,GAChBd,EAAKe,mBAAmB,YAA0BD,EAAKE,KAiCxDC,KAAI,SAAAC,G,IACXC,EAAID,EAAJC,KACAC,EAAIF,EAAJE,K,MACE,iBAEEC,OADFF,EAAK,qBACEE,OAALD,EAAK,qB,IACLE,KAAK,KAtCGR,EAAKS,OAAST,EAAKU,OACnBhB,EAASiB,UAAUtB,E,OAKnCuB,QAAQC,IAAIpB,E,GArBA,CACZqB,KAAM,KACNC,WAAY,QACZC,UAAW,IA4Bf,SAASlB,I,IAASmB,EAAAC,UAAAC,OAAA,YAAAD,UAAA,GAAQA,UAAA,GAAD,EACfE,EAAU,CACZC,QAAS,CACLC,cAAe,gCAGjBC,EAAW,uCACjB,OAAOC,MAAM,GAA8BjB,OAA3BgB,EAAS,oBAAuBhB,OAALU,GAAQG,GAASrB,MAAK,SAAA0B,GAC7D,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAEd,OAAOF,EAAKG,M,IAepB9B,IAAWC,MAAK,SAAAC,GAEZT,EAASsC,QAAQxC,E,IAClByC,OAAM,SAAAC,G,OAAOnB,QAAQC,IAAIkB,E","sources":["src/js/goit-test-10-020.js"],"sourcesContent":["\"use strict\";\n\n// <!-- Лекция 20.11.2022 -->\n\n\n// // 1. Пагинация страниц\n\n// // 1.1 слушатели\n// const list = document.querySelector('.list');\n// const load = document.querySelector('.load');\n// let page = 1;\n// // 1.2 обработчик события\n// load.addEventListener('click', onLoad)\n\n// // 1.3 запрос на сервер\n// function ringsApi(page = 1) {\n//     const options = {\n//         headers: {\n//             Authorization: 'Bearer XJlq9OFMcHAy8pAQK7xj'\n//         }\n//     };\n//     const BASE_URL = 'https://the-one-api.dev/v2/character';\n//     return fetch(`${BASE_URL}?limit=300&page=${page}`, options).then(resp => {\n//         if (!resp.ok) {\n//             throw new Error()\n//         }\n//         return resp.json()\n//     })\n// };\n\n// // 1.4 получение ответа сервера\n// ringsApi().then(data => {\n//     list.insertAdjacentHTML('beforeend', createMarkup(data.docs))\n// }).catch(err => console.log(err));\n\n// // 1.5 рендеринг страницы\n// function createMarkup(arr) {\n//     return arr.map(({\n//         name,\n//         race\n//     }) => `<li>\n//     <h2>${name}</h2>\n//     <span>${race}</span>\n//     </li>`).join('')\n// };\n\n// // 1.6 пагинация\n// function onLoad() {\n//     page += 1;\n//     ringsApi(page).then(data => {\n//         list.insertAdjacentHTML('beforeend', createMarkup(data.docs));\n//         if (data.page === data.pages) {\n//             load.setAttribute('hidden', true)\n//         }\n//     }).catch(err => console.log(err))\n// };\n\n\n// // 2. Infinity scroll\n\n// нужен пустой div.js-guard после списка\n\nconst list = document.querySelector('.list');\nconst guard = document.querySelector('.js-guard');\n\nlet page = 1;\n\nconst options = {\n    root: null,     // весь вьюпорт\n    rootMargin: '300px',\n    threshold: 1.0\n};\nconst observer = new IntersectionObserver(onLoad, options);\n\nfunction onLoad(entries, observer) {\n    entries.forEach(entry => {\n        // isIntersecting:false - это первая страница, пока скролл не попадет в область видимости. тогда true\n        if (entry.isIntersecting) {\n            // console.log('I see');\n            page += 1;\n            ringsApi(page).then(data =>{\n                list.insertAdjacentHTML('beforeend', createMarkup(data.docs));\n                if (data.page === data.pages) {\n                    observer.unobserve(guard)\n                }\n            });\n        }\n    });\n    console.log(entries);\n};\n\n// // посмотреть, как скролл отрабатывает\n// let counter = 0;\n// document.addEventListener('scroll', () =>{\n//     counter+=1;\n//     console.log('counter', counter);\n// });\n\nfunction ringsApi(page = 1) {\n    const options = {\n        headers: {\n            Authorization: 'Bearer XJlq9OFMcHAy8pAQK7xj'\n        }\n    };\n    const BASE_URL = 'https://the-one-api.dev/v2/character';\n    return fetch(`${BASE_URL}?limit=300&page=${page}`, options).then(resp => {\n        if (!resp.ok) {\n            throw new Error()\n        }\n        return resp.json()\n    })\n};\n\nfunction createMarkup(arr) {\n    return arr.map(({\n        name,\n        race\n    }) => `<li>\n    <h2>${name}</h2>\n    <span>${race}</span>\n    </li>`).join('')\n};\n\n\nringsApi().then(data => {\n    // list.insertAdjacentHTML('beforeend', createMarkup(data.docs));\n    observer.observe(guard);\n}).catch(err => console.log(err));\n\n\n"],"names":["$773a81ce17bfb334$var$list","document","querySelector","$773a81ce17bfb334$var$guard","$773a81ce17bfb334$var$page","$773a81ce17bfb334$var$observer","IntersectionObserver","entries","observer1","forEach","entry","isIntersecting","$773a81ce17bfb334$var$ringsApi","then","data","insertAdjacentHTML","docs","map","param","name","race","concat","join","page","pages","unobserve","console","log","root","rootMargin","threshold","page1","arguments","length","options1","headers","Authorization","BASE_URL","fetch","resp","ok","Error","json","observe","catch","err"],"version":3,"file":"goit-test-10-020.09a3513d.js.map"}