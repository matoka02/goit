{"mappings":"AAkGa,MAAPA,EAAYC,KAAKC,SAAW,GAClB,IAAIC,SAAQ,CAACC,EAASC,KAClCC,YAAW,KACHN,EACAI,EAAQ,6CAERC,EAAO,yCAAyC,GAErD,EAAE,IAGJE,MACGC,IACIC,QAAQC,IAAI,wCACZD,QAAQC,IAAIF,GACL,WAEXG,IAGI,MAFAF,QAAQC,IAAI,uCACZD,QAAQC,IAAIC,GACN,IAAIC,MAAM,OAAO,IAG9BL,MACGM,IACIJ,QAAQC,IAAIG,GACL,WAEXF,IAEI,MADAF,QAAQC,IAAIC,GACN,IAAIC,MAAM,QAAQ,IAG/BL,MACGO,IACIL,QAAQC,IAAII,GACZL,QAAQC,IAAI,QAAQ,IAExBC,IAEI,MADAF,QAAQC,IAAIC,GACN,IAAIC,MAAM,OAAO","sources":["src/js/goit-test-09-018.js"],"sourcesContent":["\"use strict\";\n\n// <!-- Лекция 11.11.2022 -->\n\n\n// // 1. Асинхронный код,\n// https://handlebarsjs.com/guide/\n// Мікро процеси мають більший пріорітет\n// Мікро процеси\n// Observer\n// Promise\n\n\n\n// Макро процеси\n// setTimeout\n// setInterval\n// setimmediate\n// requestAnimationFrame\n\n// // макропроцесс => call Steck => webAPI call Steck, если синхронный код и микропроцессы выполнены\n// setTimeout(()=>{'setTimeout'});\n// // микропроцесс => call Steck => webAPI => call Steck, если синхронный код выполнен\n// Promise.resolve().then(()=>{console.log('Promise');});\n// // синхронный код => call Steck \n// console.log('object');\n\n// const promise = new Promise((res, rej)=>{\n//     const random = Math.random();\n\n//     if (random>0.5) {\n//         res(20);\n//     } else{\n//         rej('Error!');\n//     }\n// });\n// // console.log(promise);           // Promise {<rejected>: 10}\n\n// // promise.then((res)=>{console.log(res);},(err)=>{console.log(err);});                          // Error\n\n// // promise\n// // .then((res)=>{\n// //     //\n// //     //\n// //     //\n// //     //\n// //     //\n// //     //\n// //     console.log(res);                       // 20\n// // }).catch(err => console.log(err))          // Error\n// // .finally(()=>{\n// //     //\n// // })\n\n// promise\n// .then((res) => {\n//     return res * 2                        // 40           \n// })\n// .then((data) => data / 18  )                    // 40/18=2.222                    \n// .then((data) => { console.log(data)})            // underfined                    \n// .catch(err => console.log(err))          \n// .finally(()=>{\n//     //\n// })\n\n\n// // 2.Запрос к бекенду \n// // https://swapi.dev/api/\n\n// console.log('Before');\n// const promise = fetch('https://swapi.dev/api/people/5');\n// // console.log(promise);\n// promise.then(res => res.json())\n// // .then(data => console.log(data))        //{name: 'Leia Organa', height: '150', mass: '49', hair_color: 'brown', skin_color: 'light', …}\n// .then(data => {\n//     foo(data);\n//     console.log(data);                                      \n// })\n// .catch(err => console.log(err))\n// .finally(() => console.log('After all'));\n// console.log('After');\n\n// function foo(obj) {\n//     console.log('in function', obj);        //in function {name: 'Leia Organa', height: '150', mass: '49', hair_color: 'brown', skin_color: 'light', …}\n// };\n\n\n// // 3. Методы Promise\n\n// setTimeout(()=>{'setTimeout'});\n\n// Promise.resolve().then(()=>{console.log('Promise');});\n\n// console.log('object');\n\n\n// // 4. Примаер Репеты\n\nconst isSuccess = Math.random() > 0.9;\nconst promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n        if (isSuccess) {\n            resolve('Success! Value passed to resolve function');\n        } else {\n            reject('Error! Error passed to reject function');\n        }\n    }, 0);\n});\npromise\n    .then(\n        value => {\n            console.log('onResolve call inside promise.then()');\n            console.log(value); // \"Success! Value passed to resolve function\"\n            return '1 yes';\n        },\n        error => {\n            console.log('onReject call inside promise.then()');\n            console.log(error); // \"Error! Error passed to reject function\"\n            throw new Error('1 no')\n        }\n    )\n    .then(\n        x => {\n            console.log(x);\n            return '2 yes';\n        },\n        error => {\n            console.log(error);\n            throw new Error('2  no')\n        }\n    )\n    .then(\n        y => {\n            console.log(y);\n            console.log('3 yes');\n        },\n        error => {\n            console.log(error);\n            throw new Error('3 no')\n        }\n    );\n\n\n// // 5. Подключение стилей из библиотеки\n\n// В терминале прописать\n// npm install --save-dev parcel-transformer-hbs\n\n// Добавить в файл parcelrc\n//  \"transformers\": {\n//     \"*.hbs\": [\n//         \"parcel-transformer-hbs\"\n//       ]\n//     }\n"],"names":["$4b136aa0122ae996$var$isSuccess","Math","random","Promise","resolve","reject","setTimeout","then","value","console","log","error","Error","x","y"],"version":3,"file":"goit-test-09-018.91bed5e7.js.map"}