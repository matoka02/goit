{"mappings":"AAAA","sources":["src/js/goit-test-03-006.js"],"sourcesContent":["\"use strict\";\n\n// <!-- Лекция 23.09.2022 -->\n\n// const user = {\n//     email: \"mango@mail.com\",\n//     age: 20\n// };\n// const { email: userEmail } = user;\n// // console.log(email);                             //Uncaught ReferenceError: email is not defined\n// console.log(userEmail);                         //mango@mail.com\n\n\n// const firstObject = { A:1, B:2 };\n// const secondObject = { A:3, C:4 };\n// const thirdObject = {\n//     A: 5,\n//     ...firstObject,\n//     ...secondObject,\n//     C: 6\n// };\n// console.log(thirdObject);                           //{A: 3, B: 2, C: 6}\n\n\n// function foo(a, b, c, ...args) {\n//     console.log(args);                                 // массив [4, 5]\n// };\n// foo(1,2,3,4,5);\n\n\n// // Деструктуризация\n\n// // Вычисление индекса массы тела\n// function calcBMI(weight, height) {\n//     const numericWeight = Number(weight.replace(',', '.'));\n//     const numericHeight = Number(height.replace(',', '.'));\n//     return Number((numericWeight / numericHeight **2).toFixed(1));\n// };\n// console.log(calcBMI({\n//         weight: '88,3',\n//         height: '1.75'\n// }));\n\n// console.log(calcBMI('88,3', '1.75'));\n// console.log(calcBMI('68,3', '1.65'));\n// console.log(calcBMI('118,3', '1.95'));\n\n// // Перебор ключей и значений\n// function printContactsInfo({ names, phones }) {\n//     const nameList = names.split(',');\n//     const phoneList = phones.split(',');\n//     for (let i = 0; i < nameList.length, i < phoneList.length; i += 1) {\n//         console.log(`${nameList[i]}: ${phoneList[i]}`);\n//     }\n// };\n// printContactsInfo({\n//     names: 'Jacob,William,Solomon,Anna,Henry',                              //Henry: undefined\n//     phones: '89001234567,89001112233,89005556677,890055566300'\n//     }\n// );\n\n\n// Глубокая деструктуризация\n\n// // было\n// function getBotReport(companyName, repairBots, defenceBots) {\n//     return `${companyName} has ${repairBots + defenceBots} bots in stock`;\n// };\n\n// console.log(getBotReport('Cyberdyne Systems', 150, 50));\n\n// // стало\n// function getBotReport({companyName, bots: { repairBots, defenceBots }}) {\n//     console.log('companyName', companyName);\n//     // console.log('bots', bots);                          // не выведется, т.к. уже прошел глубокую деструктуризацию\n//     console.log('repairBots', repairBots);\n//     console.log('defenceBots', defenceBots);\n//     return `${companyName} has ${repairBots + defenceBots} bots in stock`;\n// };\n\n// console.log(getBotReport({\n//     companyName: 'Cyberdyne Systems',\n//     bots: {\n//         repairBots: 150,\n//         defenceBots: 50,\n//         }\n// }));\n\n\n// Описание функции\n// https://uk.wikipedia.org/wiki/JSDoc\n\n// /**\n//  * Get object with info about company and return info string\n//  * @param {Object} object\n//  * @returns {String} Info string\n// */\n\n\n// Вычисление индекса массы тела\n\n// /**\n//  * Рассчитываем индекс массы тела\n//  * @param {Object} obj\n//  * @returns {Number} BMI\n//  */\n// function calcBMI({weight, height}) {\n//     const numericWeight = Number(weight.replace(',', '.'));\n//     const numericHeight = Number(height.replace(',', '.'));\n//     return Number((numericWeight / numericHeight **2).toFixed(1));\n// };\n// console.log(calcBMI({ weight:'88,3', height:'1.75'}));\n// console.log(calcBMI({ weight:'68,3', height:'1.65'}));\n// console.log(calcBMI({ weight:'118,3', height:'1.95'}));\n\n\n// // Перебор ключей и значений\n\n// /**\n//  * Description placeholder\n//  * @date 5/20/2023 - 3:48:33 PM\n//  *\n//  * @param {{ names: any; phones: any; }} {names, phones}\n//  */\n// function printContactsInfo({names, phones}) {\n//     const nameList = names.split(',');\n//     const phoneList = phones.split(',');\n//     for (let i = 0; i < nameList.length, i < phoneList.length; i += 1) {\n//         console.log(`${nameList[i]}: ${phoneList[i]}`);\n//     }\n// };\n// printContactsInfo({\n//     names: 'Jacob,William,Solomon,Anna,Henry',                              //Henry: undefined\n//     phones: '89001234567,89001112233,89005556677,890055566300'\n//     }\n// );\n\n\n// function getBotReport({companyName, repairBots, defenceBots}) {\n//     return `${companyName} has ${repairBots + defenceBots} bots in stock`;\n// };\n// console.log(getBotReport({\n//     companyName: 'Cyberdyne Systems',\n//     repairBots: 150,\n//     defenceBots: 50}));\n\n\n// function getStockReport({\n//     companyName,\n//     stock\n//     // без перебора\n//     // : { repairBots, defenceBots }\n//     }) {\n//     // с перебором\n//     let total = 0;\n//     for (const value of Object.values(stock)) {\n//         total += value;\n//     }\n//     // // без перебора, но не сработает если ключи в объектах не идентичны\n//     // let total = repairBots + defenceBots;\n\n//     return `${companyName} has ${total} items in stock`;\n// }\n// console.log(\n//     getStockReport({\n//         companyName: 'Cyberdyne Systems',\n//         stock: {\n//             repairBots: 150,\n//             defenceBots: 50,\n//         }\n//     })\n// );\n// console.log(\n//     getStockReport({\n//         companyName: 'Belacci',\n//         stock: {\n//             shoes: 20,\n//             skirts: 10,\n//             hats: 5,\n//         }\n//     })\n// );\n\n\n// // Операция SPRED\n// // Дополнить функцию createContact(partialContact), чтобы она возвращала новый объект контакта с добавленными свойствами id и createAt, а также list со значением 'default', если в partialContact нет такого свойства.\n\n// function createContact(partialContact) {\n//     return {\n//         id: generatedId(),                  // добавлено функцией снизу\n//         createAt: new Date(),               // добавлено функцией\n//         list: 'default',                    // добавлено в теле этой функции\n//         ...partialContact,\n//     }\n// }\n// console.log(\n//     createContact({\n//         name: 'Mango',\n//         email: 'mango@mail.com',\n//         list: 'friends',\n//     })\n// );\n// console.log(\n//     createContact({\n//         name: 'Poly',\n//         email: 'poly@mail.com',\n//     })\n// );\n// function generatedId() {\n//     return '_' + Math.random().toString(36).substr(2,9);\n// }\n\n\n// // Операция REST\n// Написать функцию, чтобы она возвращала новый объект со свойствами fullName вместо firstName и lastName\n\n// function transformUsername({firstName, lastName, ...props}) {\n//     return {\n//         fullName: `${firstName} ${lastName}`,\n//         ...props,\n//     }\n// }\n// console.log(\n//     transformUsername({\n//         id: 1,\n//         firstName: 'Jacob',\n//         lastName: 'Mercer',\n//         email: 'j.mercer@gmail.com',\n//         friendCount: 40,\n//     }),\n// );\n// console.log(\n//     transformUsername({\n//         id: 2,\n//         firstName: 'Adrian',\n//         lastName: 'Cross',\n//         email: 'a.cross@gmail.com',\n//         friendCount: 20,\n//     }),\n// );\n\n// // autocheck-03-19/41\n// const stones = [\n//         {\n//     name: 'Изумруд',\n//     price: 1300,\n//     quantity: 4,\n//     },\n//         {\n//     name: 'Бриллиант',\n//     price: 2700,\n//     quantity: 3,\n//     },\n//         {\n//     name: 'Сапфир',\n//     price: 400,\n//     quantity: 7,\n//     },\n//         {\n//     name: 'Аквамарин',\n//     price: 200,\n//     quantity: 2,\n//     }\n// ];\n// function getAllPropValues(propName) {\n//     const newArr = [];\n//     for (const stone of stones) {\n//         console.log(propName);\n//         // 1 вариант\n//         // for (const key in stone) {\n//         //     if (key === propName) {\n//         //         newArr.push(stone[key])\n//         //     }\n//         // }\n\n//         // 2 вариант\n//         if (propName in stone) {\n//             newArr.push(stone[propName])\n//         }\n\n//     }\n//     return newArr;\n// }\n// console.log(getAllPropValues('price'));"],"names":[],"version":3,"file":"index.f21ff671.js.map"}